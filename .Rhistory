usd = filter(alldata, USD)
?filter
usd <-select(newdata,USD)
newdata = tbl_df(usd)
str(newdata)
usd <-select(newdata,DATE,USD)
usd <-select(alldata,DATE,USD)
str(usd)
ex_currency <- "USD"
usdusd_df = select(alldata, DATE, ex_currency)
str(a)
if(ex_currency=="USD"){usdusd_df = select(alldata, DATE, USD)}
if(ex_currency=="GBP"){usdusd_df = select(alldata, DATE, GBP)}
if(ex_currency=="EUR"){usdusd_df = select(alldata, DATE, EUR)}
if(ex_currency=="CHF"){usdusd_df = select(alldata, DATE, CHF)}
if(ex_currency=="AUD"){usdusd_df = select(alldata, DATE, AUD)}
if(ex_currency=="CAD"){usdusd_df = select(alldata, DATE, CAD)}
if(ex_currency=="SGD"){usdusd_df = select(alldata, DATE, SGD)}
head(alldata[,2])
source("data_spliting.R")
data_set <- data_spliting(url)                             # Usage of Data_set
url <- "/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv"
data_set <- data_spliting(url)                             # Usage of Data_set
if(ex_currency=="USD"){usdusd_df = select(alldata, DATE, USD)}
if(ex_currency=="GBP"){usdusd_df = select(alldata, DATE, GBP)}
if(ex_currency=="EUR"){usdusd_df = select(alldata, DATE, EUR)}
if(ex_currency=="CHF"){usdusd_df = select(alldata, DATE, CHF)}
if(ex_currency=="AUD"){usdusd_df = select(alldata, DATE, AUD)}
if(ex_currency=="CAD"){usdusd_df = select(alldata, DATE, CAD)}
if(ex_currency=="SGD"){usdusd_df = select(alldata, DATE, SGD)
}
usd_non_normalize = head(alldata[,2])
usd_value = as.tbl(normalized(usd_non_normalize))
str(usd_non_normalize)
usd_non_normalize = alldata[,2]
usd_value = tbl_df(normalized(usd_non_normalize))
names(usd_value) = "USD"
result =  createTimeSlices(usd_value$USD, predictor_order, 1, fixedWindow = T)
str(usd_value)
usd_non_normalize = alldata[,2]
usd_non_normalize
usd_non_normalize
alldata = tbl_df(read.csv(url))
if(ex_currency=="USD"){usdusd_df = select(alldata, DATE, USD)}
if(ex_currency=="GBP"){usdusd_df = select(alldata, DATE, GBP)}
if(ex_currency=="EUR"){usdusd_df = select(alldata, DATE, EUR)}
if(ex_currency=="CHF"){usdusd_df = select(alldata, DATE, CHF)}
if(ex_currency=="AUD"){usdusd_df = select(alldata, DATE, AUD)}
if(ex_currency=="CAD"){usdusd_df = select(alldata, DATE, CAD)}
if(ex_currency=="SGD"){usdusd_df = select(alldata, DATE, SGD)}
if(ex_currency=="USD"){usdusd_df = select(alldata, DATE, USD)}
if(ex_currency=="USD"){usd_df = select(alldata, DATE, USD)}
usd_df = select(alldata, DATE, USD)
select(alldata, DATE, USD
)
?select
if(ex_currency=="USD"){usd_df = select(alldata, USD)}
if(ex_currency =="USD"){usd_df = select(alldata, USD)}
ex_currency=="USD"
usd_df = select(alldata, DATE, USD)
if(ex_currency=="USD"){usd_df <_ select(alldata, DATE, USD)}
if(ex_currency=="USD"){usd_df <- select(alldata, DATE, USD)}
usd <-select(a,DATE,USD)
str(a)
usd <-select(a,DATE)
a <- tbl_df(a)
usd <-select(a,DATE)
usd <-select(newdata,USD)
alldata = tbl_df(read.csv(url))
str(alldata)
if(ex_currency=="USD"){usd_df = select(alldata, DATE, USD)}
select(alldata, DATE, USD)
alldata$DATE
require("dplyr")
if(ex_currency=="USD"){usd_df = select(alldata, DATE, USD)}
if(ex_currency=="USD"){usd_df = select_(alldata, DATE, USD)}
require("dplyr")
alldata = tbl_df(read.csv(url))
if(ex_currency=="USD"){usd_df = select(alldata, DATE, USD)}
if(ex_currency=="GBP"){usd_df = select(alldata, DATE, GBP)}
if(ex_currency=="EUR"){usd_df = select(alldata, DATE, EUR)}
if(ex_currency=="CHF"){usd_df = select(alldata, DATE, CHF)}
if(ex_currency=="AUD"){usd_df = select(alldata, DATE, AUD)}
if(ex_currency=="CAD"){usd_df = select(alldata, DATE, CAD)}
if(ex_currency=="SGD"){usd_df = select(alldata, DATE, SGD)}
usd_non_normalize = usd_df[,2]
names(usd_value) = "USD"
result =  createTimeSlices(usd_value$USD, predictor_order, 1, fixedWindow = T)
train_data = training_data(result, usd_value)
library(caret)
usd_value = tbl_df(normalized(usd_non_normalize))
names(usd_value) = "USD"
result =  createTimeSlices(usd_value$USD, predictor_order, 1, fixedWindow = T)
rm(a)
rm(newdata)
rm(usd)
usd_value = tbl_df(normalized(usd_non_normalize))
View(usd_value)
names(usd_value) = "USD"
result =  createTimeSlices(usd_value$USD, predictor_order, 1, fixedWindow = T)
result =  createTimeSlices(usd_value$USD, 3, 1, fixedWindow = T)
train_data = training_data(result, usd_value)
vector_train = as.vector(train_data$USD,"any")
matrix_train <- matrix(vector_train, nrow = predictor_order, ncol = length(vector_train)/predictor_order)
test_data =  testing_data(result,usd_value)
train_until = ceiling(length(matrix_train)*0.6/predictor_order)
training_input = matrix_train[1:predictor_order, 1:train_until]
training_input = matrix_train[1:3, 1:train_until]
test_data =  testing_data(result,usd_value)
train_until = ceiling(length(matrix_train)*0.6/3)
predictor_order <- 3
usd_value = tbl_df(normalized(usd_non_normalize))
names(usd_value) = "USD"
result =  createTimeSlices(usd_value$USD, predictor_order, 1, fixedWindow = T)
train_data = training_data(result, usd_value)
vector_train = as.vector(train_data$USD,"any")
matrix_train <- matrix(vector_train, nrow = predictor_order, ncol = length(vector_train)/predictor_order)
#Class Variable
test_data =  testing_data(result,usd_value)
#input_train 60 % && output_train 60 %
train_until = ceiling(length(matrix_train)*0.6/predictor_order)
training_input = matrix_train[1:predictor_order, 1:train_until]
train_end = ceiling(length(test_data$USD)*0.6)
training_output = test_data[1:train_end,]
new_input = t(training_input)
train_input = as.data.frame(new_input)
train_dataset <- cbind(train_input, training_output)
#input_test 40% && output_test 40%
test_until <- train_until+1
test_end <- train_end+1
matrix_end <- length(matrix_train)/predictor_order
testing_input = matrix_train[1:predictor_order, test_until: matrix_end]
testing_output = test_data[test_end:length(test_data$USD),]
new_input = t(testing_input)
test_input = as.data.frame(new_input)
test_dataset = cbind(test_input, testing_output)
## Seperating TEST and VALIDATE dataset 20% each
test_data_end <- ceiling(length(test_dataset$USD)*0.5)
test_data = test_dataset[1:test_data_end, ]
validate_start = test_data_end+1
validate_data = test_dataset[validate_start:length(test_dataset$USD),]
#Nameing columns
if (predictor_order==3){
names(train_dataset) <- c("firstDay","secondDay", "thirdDay", "oneDayAhead")
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "oneDayAhead")
}
if(predictor_order==4){
names(train_dataset) <- c("firstDay","secondDay", "thirdDay","fourthDay", "oneDayAhead")
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "fourthDay","oneDayAhead")
}
if(predictor_order==5){
names(train_dataset) <- c("firstDay","secondDay", "thirdDay","fourthDay","FifthDay", "oneDayAhead")
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "fourthDay","Fifthday","oneDayAhead")
}
if(predictor_order==6){
names(train_dataset) <- c("firstDay","secondDay", "thirdDay","fourthDay","FifthDay","SixthDay", "oneDayAhead")
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "fourthDay","Fifthday","SixthDay","oneDayAhead")
}
if(predictor_order==7){
names(train_dataset) <- c("firstDay","secondDay", "thirdDay","fourthDay","FifthDay","SixthDay","SeventhDay","oneDayAhead")
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "fourthDay","Fifthday","SixthDay","SeventhDay","oneDayAhead")
}
if(predictor_order==8){
names(train_dataset) <- c("firstDay","secondDay", "thirdDay","fourthDay","FifthDay","SixthDay","SeventhDay","eighthDay","oneDayAhead")
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "fourthDay","Fifthday","SixthDay","SeventhDay","eighthDay","oneDayAhead")
}
if(predictor_order==9){
names(train_dataset) <- c("firstDay","secondDay", "thirdDay","fourthDay","FifthDay","SixthDay","SeventhDay","eighthDay","ninethDay","oneDayAhead")
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "fourthDay","Fifthday","SixthDay","SeventhDay","eighthDay","ninethDay","oneDayAhead")
}
if(predictor_order==10){
names(train_dataset) <- c("firstDay","secondDay", "thirdDay","fourthDay","FifthDay","SixthDay","SeventhDay","eighthDay","ninethDay","tenthDay","oneDayAhead")
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "fourthDay","Fifthday","SixthDay","SeventhDay","eighthDay","ninethDay","tenthDay","oneDayAhead")
}
Date = createTimeSlices(usd_df$DATE, predictor_order, 1, fixedWindow = T)
date = testing_data(Date,usd_df$DATE)
date = testing_data(Date,usd_df)
testing_date = date[test_end:length(usd_df$DATE),]$Date
testing_date = date[test_end:length(usd_df$DATE),]$DATE
testing_date_list <- list(lapply(testing_date, as.character))
i <- 1
testing_date <- data_frame("Date"= character())
for (i in 1:length(testing_date_list[[1]])) {
testing_date[i,] <- c(testing_date_list[[1]][[i]])
}
test_data_end <- ceiling(length(test_dataset$firstDay)*0.5)
test_date = testing_date[1:test_data_end,]
validate_start = test_data_end+1
validate_date = testing_date[validate_start:length(testing_date$Date),]
output <- list(train_dataset,test_data,validate_data,test_date,validate_date, usd_non_normalize)
rm(matrix())
rm(matrix_train,matrix_end
)
rm(test_end,test_data,test_data)
rm(test_dataset)
rm(test_dataset_PO3)
rm(test_date)
rm(test_input,test_until)
rm(test_data_end)
rm(test_date_PO3)
rm(testing_date_list)
rm(testing_input)
rm(testing_date)
rm(testing_output)
rm(train_data)
rm(train_end,train_dataset_PO3,train_dataset)
rm(train_input)
rm(training_input,training_output,train_until)
rm(b)
rm(data_set)
rm(count)
rm(Date)
rm(ex_currency)
rm(i,j,k,l)
rm(actual_usd)
rm(predictor_order)
rm(usd_non_normalize)
rm(usd_non_normalize_PO3)
rm(usdusd_df)
rm(validate_data)
rm(validate_date)
rm(usd_value)
rm(usd_df)
rm(new_input)
rm(learning_func)
rm(count2)
rm(result_usd)
rm(validate_start)
rm(vector_train)
rm(result_usd_PO3)
rm(result)
rm(actual_usd_PO3)
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
predictor_order <- seq(3,10,1)
currency <- c("USD","GBP","EUR","CHF","AUD","CAD","SGD")
url <- "/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv"
source("data_spliting.R")
data_set <- data_spliting(url)                             # Usage of Data_set
url <- "/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv"
source("data_spliting.R")
data_set <- data_spliting(url)                             # Usage of Data_set
source("functions.R")
url <- "E:/WUT FYP DATA/FYP Program/FYP Program/Data/alldata.csv"
train_per <- 0.6
data_set <- data_spliting(url,train_per)
source("data_spliting.R")
url <- "E:/WUT FYP DATA/FYP Program/FYP Program/Data/alldata.csv"
train_per <- 0.6
data_set <- data_spliting(url,train_per)
library(xlsx)
library("xlsx", lib.loc="~/R/R-3.3.2/library")
install.packages("rJava")
library(xlsx)
library("rJava")
library("rJava", lib.loc="~/R/R-3.3.2/library")
install.packages("rJava")
library("rJava", lib.loc="~/R/R-3.3.2/library")
View(result_HETRO_USD)
View(result_HETRO_USD)
result_HETRO_USD
result_HOMO_USD
View(result_HOMO_USD)
str(Result_USD_HOMO_LIST)
a <-Result_USD_HOMO_LIST[[1]]
str(a)
a <-Result_USD_HOMO_LIST[[1]][[5]]
str(a)
str(a)
str(a)
a <-Result_USD_HOMO_LIST[[1]][[5]][[1]]
str(a)
unname(a)
a <-unname(a)
a
predicted_value <-a
a <-Result_USD_HOMO_LIST[[1]][[5]][[1]]
error <- Result_USD_HOMO_LIST[[1]][[5]][[2]]
error <- unname(error)
library(qqplot)
library(ggplot2)
1772+591
date <- date$DATE[1773:2363]
rm(alldata)
rm(test_dataset_PO3)
rm(test_date_PO3)
rm(usd_non_normalize_PO3)
rm(a)
rm(actual_usd_PO3)
train_per <- 0.6
train_dataset <- list()
test_dataset <- list()
predictor_order <- seq(3,10,1)
test_date <- list()
usd_non_normalize <- list()
result_usd <- list()
actual_usd <- list()
learning_rate <- seq(0.1,1,0.1)
activation_func <- c("logistic", "tanh")
train_dataset <- list()
test_dataset <- list()
predictor_order <- 3
test_date <- list()
usd_non_normalize <- list()
result_usd <- list()
actual_usd <- list()
learning_rate <- 0.1
activation_func <- c("logistic")
train_per <- 0.6
source("HOMO.R")
Result_USD_HOMO_LIST <- list()
count <- 1
count2 <- 1
for (i in 1:length(predictor_order)) {
result_HOMO_USD <- data.frame("Predictor_Order"=numeric(),"Neurons"=numeric(),"RMSE"=numeric(),
"MAE"=numeric(),"Activation_Function"=character(),"Learning_Rate"=numeric(),
stringsAsFactors=FALSE)
usd_non_normalize_PO3 <- data.frame()
test_date_PO3 <- data.frame()
actual_usd_PO3 <- data.frame()
result_usd_PO3 <- list()
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[4]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[6]]
actual_usd[[i]] <- test_dataset[[i]][,i+3]
if(predictor_order[i]==3){ neurons<-seq(2,20,1)}
if(predictor_order[i]==4){ neurons<-seq(3,20,1)}
if(predictor_order[i]==5){ neurons<-seq(3,20,1)}
if(predictor_order[i]==6){ neurons<-seq(4,20,1)}
if(predictor_order[i]==7){ neurons<-seq(4,20,1)}
if(predictor_order[i]==8){ neurons<-seq(5,20,1)}
if(predictor_order[i]==9){ neurons<-seq(5,20,1)}
if(predictor_order[i]==10){ neurons<-seq(6,20,1)}
for (l in 1:length(learning_rate) ){
for (k in 1:length(activation_func)) {
for (j in 1:length(neurons)) {
train_dataset_PO3 <- train_dataset[[i]]
test_dataset_PO3 <- test_dataset[[i]]
test_date_PO3 <- test_date[[i]]
usd_non_normalize_PO3 <-   usd_non_normalize[[i]]
actual_usd_PO3 <-  actual_usd[[i]]
result_usd_PO3[[j]] <-  HOMO(train_dataset_PO3,test_dataset_PO3, usd_non_normalize_PO3,
neurons = neurons[j], predictor_order[i],
activation_func[k],learning_rate[l])
result_HOMO_USD[count2,] <-c(predictor_order[i],neurons[j],
result_usd_PO3[[j]][4],result_usd_PO3[[j]][5],
activation_func[k],learning_rate[l])
Result_USD_HOMO_LIST[[count]] <- list(predictor_order[i],neurons[j],learning_rate[l],
activation_func[k], result_usd_PO3[[j]])
count <- count +1
count2 <- count2 +1
}
}
}
}
library(xlsx)
write.xlsx(result_HOMO_USD,"result_HOMO_USD_Train_60.xlsx")
a <- cbind(test_date[[1]],test_dataset[[predicted_value+1]],)
a <- cbind(test_date[[1]],test_dataset[[,predicted_value+1]],)
predicted_value+1
a <- cbind(test_date[[1]],test_dataset[[predictor_order+1]])
a <- cbind(test_date[[1]],test_dataset[[predictor_order+1]])
predictor_order+1
a <- cbind(test_date[[1]],test_dataset[[predictor_order+1]])
a <- cbind(test_date[[1]],test_dataset[[4]])
list(test_dataset)
str(test_date)
str(test_dataset)
test_dataset[[4]]
a <- cbind(test_date[[1]],test_dataset[,4])
test_dataset[,4]
test_dataset[[1]][,4]
a <- cbind(test_date[[1]],test_dataset[[1]][,4])
str(a)
head(a)
a <- Result_USD_HOMO_LIST[[1][[5]][[1:2]]
a <- Result_USD_HOMO_LIST[[1][[5]][[1]]
a <- Result_USD_HOMO_LIST[[1]][[5]][[1:2]]
str(a)
a <- Result_USD_HOMO_LIST[[1]][[5]][[1]]
str(a)
predict_value<- Result_USD_HOMO_LIST[[1]][[5]][[1]]
predict_error <- Result_USD_HOMO_LIST[[1]][[5]][[2]]
actual <- predict_value + predict_error
homo_model1 <- Result_USD_HOMO_LIST[[5]][[6]][[1]]
homo_model1 <- Result_USD_HOMO_LIST[[5]][[6]]
homo_model1 <- Result_USD_HOMO_LIST[[5]]
homo_model1 <- Result_USD_HOMO_LIST[[1]][[5]][[6]][[1]]
str(homo_model1)
homo_model1 <- Result_USD_HOMO_LIST[[1]][[5]][[6]][[1]]
homo_model2 <- Result_USD_HOMO_LIST[[1]][[5]][[6]][[2]]
homo_model3 <- Result_USD_HOMO_LIST[[1]][[5]][[6]][[3]]
head(actual)
validate_data <- data_set[[1]][[3]]
head(validate_data)
validate_data <- data_set[[1]][[1]][[3]]
head(validate_data)
length(validate_data$V1)
predictor_order
model_results <- neuralnet::compute(homo_model1, validate_data[1:predictor_order])
predicted_oneDayhead <- model_results$net.result
model_results2 <- neuralnet::compute(homo_model2, validate_data[1:predictor_order])
predicted_oneDayhead2 <- model_results2$net.result
model_results3 <- neuralnet::compute(homo_model3, validate_data[1:predictor_order])
predicted_oneDayhead3 <- model_results3$net.result
all_predicted <- cbind(predicted_oneDayhead,predicted_oneDayhead2,predicted_oneDayhead3)
all_predicted <-as.data.frame(all_predicted)
actual <- denormalized(test_dataset[,predictor_order+1],actual)
train_data <- data_set[[1]][[1]][[1]]
length(train_data$oneDayAhead)
train_data <- data_set[[1]][[1]][[2]]
test_data <- data_set[[1]][[1]][[2]]
length(test_data$oneDayAhead)
length(test_data$USD)
start <- length(train_data$oneDayAhead) + ength(test_data$USD)
start <- length(train_data$oneDayAhead) + length(test_data$USD)
start
length(train_data$oneDayAhead)
train_data <- data_set[[1]][[1]][[1]]
start <- length(train_data$oneDayAhead) + length(test_data$USD)
start
2363 - 2956
predictor_order
actual <- denormalized(validate_data[,predictor_order+1],data_set[[1]][[predictor_order - 2]][[6]])
actual <- denormalized(validate_data[,predictor_order+1],data_set[[1]][[predictor_order - 2]][[6]])
max_value <- apply(all_predicted,1,max)
error_max <- actual - max_value
rmse(error_max)
error_max
max_value
usd_non_normalize <- data_set[[1]][[predictor_order - 2]][[6]]
usd_non_normalize <- data_set[[1]][[predictor_order - 2]][[6]]
actual <- denormalized(validate_data[,predictor_order+1],usd_non_normalize)
usd_non_normalize <- data_set[[1]][[predictor_order - 2]][[6]]
model_results <- neuralnet::compute(homo_model1, validate_data[1:predictor_order])
predicted_oneDayhead <- denormalized(model_results$net.result,usd_non_normalize)
model_results2 <- neuralnet::compute(homo_model2, validate_data[1:predictor_order])
predicted_oneDayhead2 <- denormalized(model_results2$net.result,usd_non_normalize)
model_results3 <- neuralnet::compute(homo_model3, validate_data[1:predictor_order])
predicted_oneDayhead3 <- denormalized(model_results3$net.result,usd_non_normalize)
all_predicted <- cbind(predicted_oneDayhead,predicted_oneDayhead2,predicted_oneDayhead3)
all_predicted <-as.data.frame(all_predicted)
actual <- denormalized(validate_data[,predictor_order+1],usd_non_normalize)
max_value <- apply(all_predicted,1,max)
error_max <- actual - max_value
rmse(error_max)
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
error_mean <- actual - mean_value
error_all_after_fusion <- as.data.frame(cbind(error_min,error_max,error_mean))
names(error_all_after_fusion) <- c("MIN","MAX","MEAN")
rmse_min <- rmse(error_all_after_fusion$MIN)
mae_min <- mae(error_all_after_fusion$MIN)
rmse_max <- rmse(error_all_after_fusion$MAX)
mae_max <- mae(error_all_after_fusion$MAX)
rmse_mean <- rmse(error_all_after_fusion$MEAN)
mae_mean<- mae(error_all_after_fusion$MEAN)
rmse_rate <- min(rmse_min,rmse_max,rmse_mean)
if(rmse_rate == rmse_max ){
final_result = list(unname(max_value),unname(error_max),"MAX",rmse_rate,mae_max)
}
if(rmse_rate == rmse_min ){
final_result = list(unname(min_value),unname(error_min),"MIN",rmse_rate,mae_min)
}
if(rmse_rate == rmse_mean){
final_result = list(unname(mean_value),unname(error_mean),"MEAN",rmse_rate,mae_mean)
}
View(result_HOMO_USD)
usd_non_normalize <- data_set[[1]][[predictor_order - 2]][[6]]
model_results <- neuralnet::compute(homo_model1, validate_data[1:predictor_order])
predicted_oneDayhead <- denormalized(model_results$net.result,usd_non_normalize)
model_results2 <- neuralnet::compute(homo_model2, validate_data[1:predictor_order])
predicted_oneDayhead2 <- denormalized(model_results2$net.result,usd_non_normalize)
model_results3 <- neuralnet::compute(homo_model3, validate_data[1:predictor_order])
predicted_oneDayhead3 <- denormalized(model_results3$net.result,usd_non_normalize)
all_predicted <- cbind(predicted_oneDayhead,predicted_oneDayhead2,predicted_oneDayhead3)
all_predicted <-as.data.frame(all_predicted)
actual <- denormalized(validate_data[,predictor_order+1],usd_non_normalize)
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
error_mean <- actual - mean_value
error_all_after_fusion <- as.data.frame(cbind(error_min,error_max,error_mean))
names(error_all_after_fusion) <- c("MIN","MAX","MEAN")
rmse_min <- rmse(error_all_after_fusion$MIN)
mae_min <- mae(error_all_after_fusion$MIN)
rmse_max <- rmse(error_all_after_fusion$MAX)
mae_max <- mae(error_all_after_fusion$MAX)
rmse_mean <- rmse(error_all_after_fusion$MEAN)
mae_mean<- mae(error_all_after_fusion$MEAN)
rmse_rate <- min(rmse_min,rmse_max,rmse_mean)
if(rmse_rate == rmse_max ){
final_result = list(unname(max_value),unname(error_max),"MAX",rmse_rate,mae_max)
}
if(rmse_rate == rmse_min ){
final_result = list(unname(min_value),unname(error_min),"MIN",rmse_rate,mae_min)
}
if(rmse_rate == rmse_mean){
final_result = list(unname(mean_value),unname(error_mean),"MEAN",rmse_rate,mae_mean)
}
model_results <- neuralnet::compute(homo_model1, test_dataset[1:predictor_order])
predicted_oneDayhead <- model_results$net.result
model_results <- neuralnet::compute(homo_model1, test_dataset[1:predictor_order])
predicted_oneDayhead <- model_results$net.result
predict_value <- denormalized(predicted_oneDayhead,usd_non_normalize)
actual <- denormalized(test_dataset[,predictor_order+1],usd_non_normalize)
