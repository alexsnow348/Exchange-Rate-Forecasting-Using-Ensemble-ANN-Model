rw <-sample(1:10,12,replace = T)
rw <- normalized(rw)
head(rw)
set.seed(1)
rw <-sample(1:10,3,replace = T)
rw <- normalized(rw)
str(as.matrix)
r_w <- as.matrix(r_w, nrow(4), ncol(3))
data<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, actfns = c(1,1), it= 50,visual = T)
rw <-sample(1:10,3,replace = T)
set.seed(1)
r_w <- sample(1:10,12 , replace = T)
r_w <- normalized(r_w)
rw <- normalized(rw)
try <- matrix(r_w, 4,3)
try
set.seed(1)
weight1 <- sample(1:10,size = predictor_order*neurons, replace = T)
weight1 = normalized(weight1)
weight1_out <- sample(1:10,predictor_order,replace = T)
weight1_out <- sample(1:10,neurons,replace = T)
weight1_out <- normalized(weight1_out)
weights <- list(weight1,weight)
weights <- list(weight1,weight1_out)
set.seed(1)
weight1<- sample(1:10,size = predictor_order*neurons, replace = T)
weight1<- normalized(weight1)
weight1_out <- sample(1:10,neurons,replace = T)
weight1_out <- normalized(weight1_out)
weights <- list(weight1,weight1_out)
data<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, actfns = c(1,1), it= 50, weight = weights,visual = T)
weights <- list(weight1,weight1_out)
nrow(weights[[1]])
nrow(weights[1])
weights[[1]]
weights[[2]]
weight1 <- as.matrix(weight1,4,3)
weights <- list(weight1,weight1_out)
weights <- list(weight1,weight1_out)
weight1 <- as.matrix(weight1,4,3)
weight1 <- matrix(weight1,4,3)
weights <- list(weight1,weight1_out)
data<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, actfns = c(1,1), it= 50, weight = weights,visual = T)
weights[[1]]
nrow(weights[[1]])
data<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, actfns = c(1,1), it= 50, weight = weights,visual = T)
data<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, actfns = c(1,1), it= 50,visual = T)
?inspect
??inspect
data_w<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, weight = c(weight1,weight1_out) ,actfns = c(1,1), it= 50,visual = T)
weight1<- sample(1:10,size = length(train_dataset[,1]), replace = T)
weight1<- normalized(weight1)
weight1 <- matrix(weight1,predictor_order,neurons)
weight1_out <- sample(1:10,length(train_dataset[,1]),replace = T)
weight1_out <- normalized(weight1_out)
weight1_out <- matrix(weight1_out,neurons)
data_w<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, weight = weight1  ,actfns = c(1,1), it= 50,visual = T)
length(weight1)
weight1 <- matrix(weight1,predictor_order,neurons)
length(weight1)
length(weight1[[1]])
length(weight1[1)
length(weight1[1])
data_w<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, weight = c(weight1,weight1_out) ,actfns = c(1,1), it= 50,visual = T)
?mlp
weight1<- sample(1:10,size = length(train_dataset[,1]), replace = T)
weight1<- normalized(weight1)
data_w<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, weight =  weight1 ,actfns = c(1,1), it= 50,visual = T)
length(weight1)
length(weights)
weight1 <- matrix(weight1,predictor_order,neurons)
weight1_out <- sample(1:10,length(train_dataset[,1]),replace = T)
weight1_out <- normalized(weight1_out)
weight1_out <- matrix(weight1_out,neurons)
weights <- list(weight1,weight1_out)
data_w<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, weight =  weights ,actfns = c(1,1), it= 50,visual = T)
weight1_out <- matrix(weight1_out,,neurons)
weights <- list(weight1,weight1_out)
weight1_out <- matrix(weight1_out,ncol = neurons)
weights <- list(weight1,weight1_out)
data_w<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, weight =  weights ,actfns = c(1,1), it= 50,visual = T)
weight1_out <- matrix(weight1_out,nrow= predictor_order,ncol = neurons)
weights <- list(weight1,weight1_out)
data_w<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, weight =  weights ,actfns = c(1,1), it= 50,visual = T)
lenght(weights[[1]])
length(weights[[1]])
length(weights[[2]])
length(weights[[1]][1])
length(weights[[1]][{1}])
length(weights[[1]][[1]])
str(weights[[1]])
weight1 <- matrix(weight1,ncol=neurons)
weight1<- sample(1:10,size = length(train_dataset[,1]), replace = T)
weight1<- normalized(weight1)
weight1 <- matrix(weight1,ncol=neurons)
weight1_out <- sample(1:10,length(train_dataset[,1]),replace = T)
weight1_out <- normalized(weight1_out)
weight1_out <- matrix(weight1_out,ncol = neurons)
data_w<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, weight =  weights ,actfns = c(1,1), it= 50,visual = T)
library(NeuralNetTools)
weight1<- sample(1:10,size = length(train_dataset[,1]), replace = T)
weight1<- normalized(weight1)
struct <- c(4, 3, 1)
weight_try <-neuralweights(weight1,struct = struct)
data_try_4 <-data_set[[1]][[2]]
wts_in <- c(13.12, 1.49, 0.16, -0.11, -0.19, -0.16, 0.56, -0.52, 0.81)
struct <- c(2, 2, 1)
rm(try,weight1,weight1_out,a,data,data_w,error,i,j,r_w,result)
rm(try,weight1,weight1_out,a,data,data_w,error,i,j,r_w,result)
rm(try,weight1)
rm(try,weight1,weight1_out,a,data,data_w,error,i,j,r_w,result)
rm(weights)
rm(rw)
rm(struct)
rm(wst_in)
rm(wts_in)
rm(weight_size)
data_try_4 <-data_set[[1]][[2]]
train_dataset <- data_try_4[[1]]
test_dataset <- data_try_4[[2]]
test_date <- data_try_4[[3]]
usd_non_normalize<- data_try_4[[4]]
actual_data<- test_dataset[,5]
predictor_order <- 4
neurons <- 3
train_input <- as.matrix(train_dataset[,1:4])
train_output <- as.matrix(train_dataset[,5])
test_input <- as.matrix(test_dataset[,1:4])
library("RSNNS")
library("RSNNS")
data_try_4 <-data_set[[1]][[2]]
train_dataset <- data_try_4[[1]]
test_dataset <- data_try_4[[2]]
test_date <- data_try_4[[3]]
usd_non_normalize<- data_try_4[[4]]
actual_data<- test_dataset[,5]
predictor_order <- 4
neurons <- 3
train_input <- as.matrix(train_dataset[,1:4])
train_output <- as.matrix(train_dataset[,5])
test_input <- as.matrix(test_dataset[,1:4])
model <- mlp(train_input,train_output, size = 3, learnFuncParams = c(0.1,0) )
summary(model)
result <- predict(model,test_input)
result_nor <-denormalized(result_nor,usd_non_normalize)
result_nor <-denormalized(result,usd_non_normalize)
error <- actual_data - result_nor
rmse(error)
model <- mlp(train_input,train_output, size = 3, maxit = 200,learnFuncParams = c(0.1,0) )
result <- predict(model,test_input)
result_nor <-denormalized(result,usd_non_normalize)
error <- actual_data - result_nor
rmse(error)
model <- mlp(train_input,train_output, size = 3, maxit = 1000,learnFuncParams = c(0.1,0) )
result <- predict(model,test_input)
result_nor <-denormalized(result,usd_non_normalize)
error <- actual_data - result_nor
rmse(error)
model <- mlp(train_input,train_output, size = 3, maxit = 500,learnFuncParams = c(0.1,0) )
result <- predict(model,test_input)
result_nor <-denormalized(result,usd_non_normalize)
error <- actual_data - result_nor
rmse(error)
model <- mlp(train_input,train_output, size = 3, maxit = 300,learnFuncParams = c(0.1,0) )
summary(model)
result <- predict(model,test_input)
result_nor <-denormalized(result,usd_non_normalize)
error <- actual_data - result_nor
rmse(error)
model <- mlp(train_input,train_output, size = 3, maxit = 400,learnFuncParams = c(0.1,0) )
result <- predict(model,test_input)
result_nor <-denormalized(result,usd_non_normalize)
error <- actual_data - result_nor
rmse(error)
model <- mlp(train_input,train_output, size = 3, maxit = 100,learnFuncParams = c(0.1,0) )
summary(model)
result <- predict(model,test_input)
result_nor <-denormalized(result,usd_non_normalize)
error <- actual_data - result_nor
rmse(error)
model <- mlp(train_input,train_output, size = 3, maxit = 200,learnFuncParams = c(0.1,0) )
#summary(model)
result <- predict(model,test_input)
result_nor <-denormalized(result,usd_non_normalize)
error <- actual_data - result_nor
rmse(error)
model <- mlp(train_input,train_output, size = 3, maxit = 300,learnFuncParams = c(0.1,0) )
#summary(model)
result <- predict(model,test_input)
result_nor <-denormalized(result,usd_non_normalize)
error <- actual_data - result_nor
rmse(error)
model <- mlp(train_input,train_output, size = 3, maxit = 350,learnFuncParams = c(0.1,0) )
#summary(model)
result <- predict(model,test_input)
result_nor <-denormalized(result,usd_non_normalize)
error <- actual_data - result_nor
rmse(error)
model <- mlp(train_input,train_output, size = 4, maxit = 300,learnFuncParams = c(0.1,0) )
#summary(model)
result <- predict(model,test_input)
result_nor <-denormalized(result,usd_non_normalize)
error <- actual_data - result_nor
rmse(error)
model <- mlp(train_input,train_output, size = 5, maxit = 300,learnFuncParams = c(0.1,0) )
#summary(model)
result <- predict(model,test_input)
result_nor <-denormalized(result,usd_non_normalize)
error <- actual_data - result_nor
rmse(error)
model <- mlp(train_input,train_output, size = 6, maxit = 300,learnFuncParams = c(0.1,0) )
#summary(model)
result <- predict(model,test_input)
result_nor <-denormalized(result,usd_non_normalize)
error <- actual_data - result_nor
rmse(error)
model <- mlp(train_input,train_output, size = 7, maxit = 300,learnFuncParams = c(0.1,0) )
#summary(model)
result <- predict(model,test_input)
result_nor <-denormalized(result,usd_non_normalize)
error <- actual_data - result_nor
rmse(error)
model <- mlp(train_input,train_output, size = 8, maxit = 300,learnFuncParams = c(0.1,0) )
#summary(model)
result <- predict(model,test_input)
result_nor <-denormalized(result,usd_non_normalize)
error <- actual_data - result_nor
rmse(error)
model <- mlp(train_input,train_output, size = 9, maxit = 300,learnFuncParams = c(0.1,0) )
#summary(model)
result <- predict(model,test_input)
result_nor <-denormalized(result,usd_non_normalize)
error <- actual_data - result_nor
rmse(error)
View(result_towrite)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay + fourthDay, learningrate = learning_rate,
data = train_dataset, hidden = hidden_neurons, startweights = weights)
require("neuralnet")
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay + fourthDay, learningrate = learning_rate,
data = train_dataset, hidden = hidden_neurons, startweights = weights)
require("rnn")
input_array_1 <- list()
for (i in 1:predictor_order){
input_day <- as.matrix(train_dataset[,i])
input_array_1 <- c(input_array_1,input_day)
}
input_array_1 <- as.numeric(input_array_1)
output_matrix <- as.matrix(train_dataset[,predictor_order+1])
input_try <- array( input_array_1, dim=c(dim(input_day1),predictor_order) )
output_try <- array(output_matrix, dim=c(dim(output_matrix),1))
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = ceiling((predictor_order+1)/2),
numepochs = 200
)
input_array_1 <- list()
for (i in 1:predictor_order){
input_day <- as.matrix(train_dataset[,i])
input_array_1 <- c(input_array_1,input_day)
}
input_array_1 <- as.numeric(input_array_1)
output_matrix <- as.matrix(train_dataset[,predictor_order+1])
input_try <- array( input_array_1, dim=c(dim(input_day1),predictor_order) )
input_try <- array( input_array_1, dim=c(dim(input_day),predictor_order) )
output_try <- array(output_matrix, dim=c(dim(output_matrix),1))
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = ceiling((predictor_order+1)/2),
numepochs = 200
)
test_input_array_1 <- list()
for (i in 1:predictor_order){
input_day <- as.matrix(test_dataset[,i])
test_input_array_1 <- c(test_input_array_1,input_day)
}
test_input_array_1 <- as.numeric(test_input_array_1)
test_input_try <- array( test_input_array_1, dim=c(dim(input_day),predictor_order) )
test_result <- predictr(model, test_input_try )
predict_value <- denormalized(test_result,usd_non_normalize)
actual <- denormalized(test_dataset[,predictor_order+1],usd_non_normalize)
error <- actual - predict_value
rmse(error)
require("neuralnet")
set.seed(1)
weight_size =length(train_dataset[,1])
weight2 <- sample(1:1000,size = weight_size,replace = F)
weight2 = normalizeData(weight2, type = "0_1")
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay + fourthDay, learningrate = learning_rate,
data = train_dataset, hidden = hidden_neurons, startweights = weight2)
weights <- weight2
hidden_neurons <- 3
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay + fourthDay, learningrate = learning_rate,
data = train_dataset, hidden = hidden_neurons, startweights = weights)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:predictor_order])
predicted_oneDayhead <- model_results$net.result
predict_value <- denormalized(predicted_oneDayhead,usd_non_normalize)
actual <- denormalized(test_dataset[,predictor_order+1],usd_non_normalize)
error <- actual - predict_value
rmse(error)
source("MLP.R")
first <- MLP1( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weight1)
source("MLP.R")
set.seed(1)
weight_size =length(train_dataset[,1])
weight1 <- sample(1:1000,size = weight_size,replace = F)
weight1 = normalized(weight1)
first <- MLP1( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weight1)
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weight1)
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate)
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weight1)
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weight1)
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weights = weight1)
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate =learning_rate,weights = weight1)
source("MLP.R")
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order, neuu,learning_rate,weights = weight1)
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order, neuu,learning_rate = learning_rate,weights = weight1)
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate = learning_rate,weights = weight1)
source("MLP.R")
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons = neurons,learning_rate = learning_rate,weights = weight1)
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order, neurons,learning_rate,weight1)
first_mae <- mae(first[[2]])
first_rmse<- rmse(first[[2]])
second <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weight2)
second_mae<- mae(second[[2]])
second_rmse<-  rmse(second[[2]])
set.seed(2)
weight_size =length(train_dataset[,1])
weight2 <- sample(1:1000,size = weight_size,replace = F)
weight2 = normalized(weight2)
second <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weight2)
second_mae<- mae(second[[2]])
second_rmse<-  rmse(second[[2]])
set.seed(3)
weight_size =length(train_dataset[,1])
weight3 <- sample(1:1000,size = weight_size,replace = F)
weight3 = normalized(weight3)
third <-  first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight3)
third <-  first <- MLP( train_dataset,test_dataset,usd_non_normalize,neurons,predictor_order,learning_rate,weight3)
## Third Performance ERROR
third_mae <- mae(third[[2]])
third_rmse <- rmse(third[[2]])
all_predicted <- cbind(first[[1]],second[[1]],third[[1]])
all_predicted <-as.data.frame(all_predicted)
names(all_predicted)<- c("First MLP", "Second MLP", "Third MLP")
actual <- denormalized(test_dataset[,predictor_order+1],usd_non_normalize)
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
error_mean <- actual - mean_value
error_all_after_fusion <- as.data.frame(cbind(error_min,error_max,error_mean))
names(error_all_after_fusion) <- c("MIN","MAX","MEAN")
rmse_min <- rmse(error_all_after_fusion$MIN)
mae_min <- mae(error_all_after_fusion$MIN)
rmse_max <- rmse(error_all_after_fusion$MAX)
mae_max <- mae(error_all_after_fusion$MAX)
rmse_mean <- rmse(error_all_after_fusion$MEAN)
mae_mean<- mae(error_all_after_fusion$MEAN
rmse_rate <- min(rmse_min,rmse_max,rmse_mean)
mae_rate <- min(mae_max,mae_mean,mae_min)
if(rmse_rate == rmse_max && mae_rate == mae_max){
final_result = list(max_value,error_max,"MAX",rmse_rate,mae_rate)
}
if(rmse_rate == rmse_min && mae_rate == mae_min){
final_result = list(min_value,error_min,"MIN",rmse_rate,mae_rate)
}
if(rmse_rate == rmse_mean && mae_rate == mae_mean){
final_result = list(mean_value,error_mean,"MEAN",rmse_rate,mae_rate)
}
rmse_min <- rmse(error_all_after_fusion$MIN)
mae_min <- mae(error_all_after_fusion$MIN)
rmse_max <- rmse(error_all_after_fusion$MAX)
mae_max <- mae(error_all_after_fusion$MAX)
rmse_mean <- rmse(error_all_after_fusion$MEAN)
mae_mean<- mae(error_all_after_fusion$MEAN)
rmse_rate <- min(rmse_min,rmse_max,rmse_mean)
mae_rate <- min(mae_max,mae_mean,mae_min)
if(rmse_rate == rmse_max && mae_rate == mae_max){
final_result = list(max_value,error_max,"MAX",rmse_rate,mae_rate)
}
if(rmse_rate == rmse_min && mae_rate == mae_min){
final_result = list(min_value,error_min,"MIN",rmse_rate,mae_rate)
}
if(rmse_rate == rmse_mean && mae_rate == mae_mean){
final_result = list(mean_value,error_mean,"MEAN",rmse_rate,mae_rate)
}
return(final_result)
hist(final_result[[2]])
hist(final_result[[2]])
str(hist)
hist(final_result[[2]],bandwidth.kernel(0.003))
rm(MLP1)
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weight1)
set.seed(1)
weight_size =length(train_dataset[,1])
weight1 <- sample(1:10,size = weight_size,replace = T)
weight1 = normalized(weight1, type = "0_1"
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weight1)
weight1 = normalized(weight1)
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weight1)
first_mae <- mae(first[[2]])
first_rmse<- rmse(first[[2]])
require("rnn")
?trainr
seond <- RNN(train_dataset, test_dataset,usd_non_normalize, predictor_order, learning_rate)
source("RNN.R")
source("RBF.R")
source("MLP.R")
seond <- RNN(train_dataset, test_dataset,usd_non_normalize, predictor_order, learning_rate)
source("RNN.R")
seond <- RNN(train_dataset, test_dataset,usd_non_normalize, predictor_order, learning_rate)
second_mae<- mae(second[[2]])
second_rmse<-  rmse(second[[2]])
third <-  first <- RBF(train_dataset, test_dataset, usd_non_normalize,neurons, predictor_order, learning_rate)
third <- RBF(train_dataset, test_dataset, usd_non_normalize,neurons, predictor_order, learning_rate)
source("RBF.R")
third <- RBF(train_dataset, test_dataset, usd_non_normalize,neurons, predictor_order, learning_rate)
]
third_mae <- mae(third[[2]])
third_rmse <- rmse(third[[2]])
all_predicted <- cbind(first[[1]],second[[1]],third[[1]])
all_predicted <-as.data.frame(all_predicted)
names(all_predicted)<- c("First MLP", "Second MLP", "Third MLP")
actual <- denormalized(test_dataset[,predictor_order+1],usd_non_normalize)
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
error_mean <- actual - mean_value
error_all_after_fusion <- as.data.frame(cbind(error_min,error_max,error_mean))
names(error_all_after_fusion) <- c("MIN","MAX","MEAN")
rmse_min <- rmse(error_all_after_fusion$MIN)
mae_min <- mae(error_all_after_fusion$MIN)
rmse_max <- rmse(error_all_after_fusion$MAX)
mae_max <- mae(error_all_after_fusion$MAX)
rmse_mean <- rmse(error_all_after_fusion$MEAN)
mae_mean<- mae(error_all_after_fusion$MEAN)
rmse_rate <- min(rmse_min,rmse_max,rmse_mean)
mae_rate <- min(mae_max,mae_mean,mae_min)
if(rmse_rate == rmse_max && mae_rate == mae_max){
final_result = list(max_value,error_max,"MAX",rmse_rate,mae_rate)
}
if(rmse_rate == rmse_min && mae_rate == mae_min){
final_result = list(min_value,error_min,"MIN",rmse_rate,mae_rate)
}
if(rmse_rate == rmse_mean && mae_rate == mae_mean){
final_result = list(mean_value,error_mean,"MEAN",rmse_rate,mae_rate)
}
return(final_result)
rm(error,error_all_after_fusion,error_max,error_mean,error_min)
rm(first,first_mae,first_rmse)
rm(input_array_1,input_day,input_try)
rm(hidden_neurons,i,learning_rate)
rm(mae_max,mae_min,mae_mean,mae_rate,max_value,mean_value,min_value)
rm(predictor_order)
rm(rmse_max,rmse_mean,rmse_min,rmse_rate)
rm(second,third)
rm(second_mae,second_rmse,third_mae,third_rmse)
rm(weight1,weight2,weight3)
rm(test_actual,test_date,test_dataset,weight_size)
rm(seond)
rm(exchange_model)
rm(final_result)
rm(model)
rm(model_results)
rm(actual,actual_4,actual_col,actual_data)
rm(train_input,train_output,train_dataset)
rm(data_try_4)
rn(neurons)
rm(neurons)
rm(weights)
rm(output_try)
rm(result_usd)
rm(test_input)
rm(test_result)
rm(test_input_try)
rm(test_input_array_1)
rm(output_matrix)
rm(predict_value)
rm(predicted_oneDayhead)
rm(result)
rm(result_nor)
rm(all_predicted)
rm(usd_non_normalize)
source("HETRO.r")
source("HETRO.r")
source("HETRO.R")
train_dataset <- list()                                 #   4. EURO            #   #  4. PO_6   8. PO_10
test_dataset <- list()
usd_non_normalize <- list()
actual_data <- list()
predictor_order <- seq(3,10,1)
test_date <- list()
result_usd <- list()
result_towrite <- data.frame()
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,i+3]
result_usd[[i]] <-  HOMO(train_dataset[[i]],test_dataset[[i]],usd_non_normalize[[i]],i+2,0.1)
result_towrite <-rbind( result_towrite, c(i+2,ceiling((predictor_order[i]+1)/2), result_usd[[i]][4], result_usd[[i]][5],result_usd[[i]][3]))
}
#USD_ONLY MODEL (HOMO)(HETRO)
names(result_towrite) <- c("Predictor Order","Neurons","RMSE","MAE","OPIMIZED FUSION FUNC")
