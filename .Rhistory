result__value_PO <- list()
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
validate_dataset[[i]] <- data_set[[1]][[i]][[2]]
validate_date[[i]] <- data_set[[1]][[i]][[4]]
non_normalize[[i]]<- data_set[[1]][[i]][[6]]
actual_value[[i]] <- validate_dataset[[i]][,i+3]
if(predictor_order[i]==3){ neurons<-seq(2,20,1)}
if(predictor_order[i]==4){ neurons<-seq(3,20,1)}
if(predictor_order[i]==5){ neurons<-seq(3,20,1)}
if(predictor_order[i]==6){ neurons<-seq(4,20,1)}
if(predictor_order[i]==7){ neurons<-seq(4,20,1)}
if(predictor_order[i]==8){ neurons<-seq(5,20,1)}
if(predictor_order[i]==9){ neurons<-seq(5,20,1)}
if(predictor_order[i]==10){ neurons<-seq(6,20,1)}
for (l in 1:length(learning_rate) ){
for (k in 1:length(activation_func)) {
for (j in 1:length(neurons)) {
train_dataset_PO <- train_dataset[[i]]
validate_dataset_PO <- validate_dataset[[i]]
validate_date_PO <- validate_date[[i]]
non_normalize_PO <-   non_normalize[[i]]
actual_value_PO <-  actual_value[[i]]
result__value_PO[[j]] <-  HETRO(train_dataset_PO,validate_dataset_PO, non_normalize_PO,
neurons = neurons[j], predictor_order[i], activation_func[k],learning_rate[l])
result_HETRO_USD[count2,] <-c(predictor_order[i],neurons[j],
result__value_PO[[j]][4],result__value_PO[[j]][5],
activation_func[k],learning_rate[l])
Result_USD_HETRO_LIST_80[[count]] <- list(predictor_order[i],neurons[j],learning_rate[l],
activation_func[k], result__value_PO[[j]])
count <- count +1
count2 <- count2 + 1
}
}
}
}
result_hetro <- as.tbl(result_HETRO_USD)
min_hetro_value <- min(result_hetro$RMSE)
best_hetro_usd <- filter(result_hetro, RMSE == min_hetro_value)
for (i in 1:length(result_hetro$RMSE)) {
if(result_hetro$RMSE[i]== min_hetro_value){
row_select_hetro <- i
}
}
predictor_order_hetro <- best_hetro_usd$Predictor_Order
neurons_hetro <- best_hetro_usd$Neurons
activation_func_htero <- best_hetro_usd$Activation_Function
best_hetro_usd <- filter(result_hetro, RMSE == min_hetro_value)
str(best_hetro_usd)
predictor_order_hetro <- best_hetro_usd$Predictor.Order
neurons_hetro <- best_hetro_usd$Neurons
activation_func_htero <- best_hetro_usd$Activation.Function
activation_func_htero <- best_hetro_usd$Activation.Funct
activation_func_htero <- best_hetro_usd$Activation.Func
learning_rate_hetro <- best_hetro_usd$Learning.Rate
predict_value<- Result_USD_HETRO_LIST[[row_select]][[5]][[1]]       ##[[the row number in result_HOMO_*]][[5]][[1]]
predict_value<- Result_USD_HETRO_LIST_80[[row_select]][[5]][[1]]       ##[[the row number in result_HOMO_*]][[5]][[1]]
predict_error <- Result_USD_HETRO_LIST_80[[row_select]][[5]][[2]]      ##[[the row number in result_HOMO_*]][[5]][[2]]
hetro_model1_usd <- Result_USD_HETRO_LIST_80[[row_select]][[5]][[6]][[1]]   ##[[the row number in result_HOMO_*][[5]][[6]][[1]]
hetro_model2_usd <- Result_USD_HETRO_LIST_80[[row_select]][[5]][[6]][[2]]   ##[[the row number in result_HOMO_*][[5]][[6]][[2]]
hetro_model3_usd <- Result_USD_HETRO_LIST_80[[row_select]][[5]][[6]][[3]]   ##[[the row number in result_HOMO_*][[5]][[6]][[3]]
test_data <- data_set[[1]][[predictor_order-2]][[3]]                  ## [[currency]][[predictor_order-2]][[1:6]] 1.Traindata,
validate_data <- data_set[[1]][[predictor_order-2]][[2]]                      # 2.Validate Data 3. TestData  4.validate_date 5. Test_Date
non_normalize <- data_set[[1]][[predictor_order - 2]][[6]]
model_results <- neuralnet::compute(hetro_model1_usd, test_data[1:predictor_order])
predicted_oneDayhead <- denormalized(model_results$net.result_usd,non_normalize)
model_results2 <- neuralnet::compute(hetro_model2_usd, test_data[1:predictor_order])
predicted_oneDayhead2 <- denormalized(model_results2$net.result_usd,non_normalize)
model_results2 <- neuralnet::compute(hetro_model2_usd, test_data[1:predictor_order])
hetro_model1_usd <- Result_USD_HETRO_LIST_80[[row_select]][[5]][[6]][[1]]   ##[[the row number in result_HOMO_*][[5]][[6]][[1]]
hetro_model2_usd <- Result_USD_HETRO_LIST_80[[row_select]][[5]][[6]][[2]]   ##[[the row number in result_HOMO_*][[5]][[6]][[2]]
hetro_model1_usd <- Result_USD_HETRO_LIST_80[[row_select]][[5]][[6]][[1]]   ##[[the row number in result_HOMO_*][[5]][[6]][[1]]
View(best_hetro_usd)
model_results2 <- predictr(hetro_model2_usd, test_data[1:predictor_order])
test_input_array_1 <- list()
for (i in 1:predictor_order){
input_day <- as.matrix(test_data[,i])
test_input_array_1 <- c(test_input_array_1,input_day)
}
test_input_array_1 <- as.numeric(test_input_array_1)
test_input_try <- array( test_input_array_1, dim=c(dim(input_day),predictor_order) )
head(try_input_try)
head(test_input_try)
head(test_data[,1])
head(test_data[,2])
View(test_data)
View(test_data)
head(test_data)
head(try_input_try)
head(test_input_try)
test_input_try
str(test_input_try)
test_input <- array( test_input_array_1, dim=c(dim(input_day),predictor_order) )
rm(test_input_try)
test_input <- array( test_input_array_1, dim=c(dim(input_day),predictor_order) )
model_results2 <- predictr(hetro_model2_usd, test_input)
predicted_oneDayhead2 <- denormalized(model_results2$net.result_usd,non_normalize)
predicted_oneDayhead2 <- denormalized(model_results2,non_normalize)
test_input <- as.matrix(test_data[,1:predictor_order])
test_input <- as.matrix(test_data[,1:predictor_order])
model_results3 <-  predict(data,test_input)
library("RSNNS")
test_input <- as.matrix(test_data[,1:predictor_order])
model_results3 <-  predict(data,test_input)
model_results3 <-  predict(hetro_model3_usd,test_input)
model_results3 <- as.vector(model_results3)
predicted_oneDayhead3 <- denormalized(model_results3,non_normalize)
all_predicted <- cbind(predicted_oneDayhead,predicted_oneDayhead2,predicted_oneDayhead3)
all_predicted <-as.data.frame(all_predicted)
actual <- denormalized(test_data[,predictor_order+1],non_normalize)
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
error_mean <- actual - mean_value
error_all_after_fusion <- as.data.frame(cbind(error_min,error_max,error_mean))
names(error_all_after_fusion) <- c("MIN","MAX","MEAN")
rmse_min <- rmse(error_all_after_fusion$MIN)
mae_min <- mae(error_all_after_fusion$MIN)
rmse_max <- rmse(error_all_after_fusion$MAX)
mae_max <- mae(error_all_after_fusion$MAX)
rmse_mean <- rmse(error_all_after_fusion$MEAN)
mae_mean<- mae(error_all_after_fusion$MEAN)
rmse_rate <- min(rmse_min,rmse_max,rmse_mean)
if(rmse_rate == rmse_max ){
final_result_val = list(unname(max_value),unname(error_max),"MAX",rmse_rate,mae_max)
}
if(rmse_rate == rmse_min ){
final_result_val = list(unname(min_value),unname(error_min),"MIN",rmse_rate,mae_min)
}
if(rmse_rate == rmse_mean){
final_result_val = list(unname(mean_value),unname(error_mean),"MEAN",rmse_rate,mae_mean)
}
### Filter the best_usd result_usd
library("dplyr")
# HOMO model
result_usd <- as.tbl(result_HOMO_USD)
min_value <- min(result_usd$RMSE)
best_usd <- filter(result_usd, RMSE == min(result_usd$RMSE))
for (i in 1:length(result_usd$RMSE)) {
if(result_usd$RMSE[i]== min_value){
row_select <- i
}
}
predictor_order <- best_usd$Predictor_Order
neurons <- best_usd$Neurons
activation_func <- best_usd$Activation_Function
learning_rate <- best_usd$Learning_Rate
## Getting Error and actual value from the result_usd LIST to plot
predict_value<- Result_USD_HOMO_LIST[[row_select]][[5]][[1]]       ##[[the row number in result_HOMO_*]][[5]][[1]]
predict_error <- Result_USD_HOMO_LIST[[row_select]][[5]][[2]]      ##[[the row number in result_HOMO_*]][[5]][[2]]
homo_model1_usd <- Result_USD_HOMO_LIST[[row_select]][[5]][[6]][[1]]   ##[[the row number in result_HOMO_*][[5]][[6]][[1]]
homo_model2_usd <- Result_USD_HOMO_LIST[[row_select]][[5]][[6]][[2]]   ##[[the row number in result_HOMO_*][[5]][[6]][[2]]
homo_model3_usd <- Result_USD_HOMO_LIST[[row_select]][[5]][[6]][[3]]   ##[[the row number in result_HOMO_*][[5]][[6]][[3]]
#******* Training 70% ******
predict_value<- Result_USD_HOMO_LIST_70[[row_select]][[5]][[1]]       ##[[the row number in result_HOMO_*]][[5]][[1]]
predict_error <- Result_USD_HOMO_LIST_70[[row_select]][[5]][[2]]      ##[[the row number in result_HOMO_*]][[5]][[2]]
homo_model1_usd <- Result_USD_HOMO_LIST_70[[row_select]][[5]][[6]][[1]]   ##[[the row number in result_HOMO_*][[5]][[6]][[1]]
homo_model2_usd <- Result_USD_HOMO_LIST_70[[row_select]][[5]][[6]][[2]]   ##[[the row number in result_HOMO_*][[5]][[6]][[2]]
homo_model3_usd <- Result_USD_HOMO_LIST_70[[row_select]][[5]][[6]][[3]]   ##[[the row number in result_HOMO_*][[5]][[6]][[3]]
#******* Training 80% ******
predict_value<- Result_USD_HOMO_LIST_80[[row_select]][[5]][[1]]       ##[[the row number in result_HOMO_*]][[5]][[1]]
predict_error <- Result_USD_HOMO_LIST_80[[row_select]][[5]][[2]]      ##[[the row number in result_HOMO_*]][[5]][[2]]
homo_model1_usd <- Result_USD_HOMO_LIST_80[[row_select]][[5]][[6]][[1]]   ##[[the row number in result_HOMO_*][[5]][[6]][[1]]
homo_model2_usd <- Result_USD_HOMO_LIST_80[[row_select]][[5]][[6]][[2]]   ##[[the row number in result_HOMO_*][[5]][[6]][[2]]
homo_model3_usd <- Result_USD_HOMO_LIST_80[[row_select]][[5]][[6]][[3]]   ##[[the row number in result_HOMO_*][[5]][[6]][[3]]
test_data <- data_set[[1]][[predictor_order-2]][[3]]                  ## [[currency]][[predictor_order-2]][[1:6]] 1.Traindata,
validate_data <- data_set[[1]][[predictor_order-2]][[2]]              # 2.Validate Data 3. TestData  4.validate_date 5. test_Date
# 6. actual whole dataset
#Applying three models to valadatation dataset
non_normalize <- data_set[[1]][[predictor_order - 2]][[6]]
model_results <- neuralnet::compute(homo_model1_usd, test_data[1:predictor_order])
predicted_oneDayhead <- denormalized(model_results$net.result_usd,non_normalize)
model_results2 <- neuralnet::compute(homo_model2_usd, test_data[1:predictor_order])
predicted_oneDayhead2 <- denormalized(model_results2$net.result_usd,non_normalize)
model_results3 <- neuralnet::compute(homo_model3_usd, test_data[1:predictor_order])
predicted_oneDayhead3 <- denormalized(model_results3$net.result_usd,non_normalize)
all_predicted <- cbind(predicted_oneDayhead,predicted_oneDayhead2,predicted_oneDayhead3)
all_predicted <-as.data.frame(all_predicted)
actual <- denormalized(test_data[,predictor_order+1],non_normalize)
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
error_mean <- actual - mean_value
error_all_after_fusion <- as.data.frame(cbind(error_min,error_max,error_mean))
names(error_all_after_fusion) <- c("MIN","MAX","MEAN")
rmse_min <- rmse(error_all_after_fusion$MIN)
mae_min <- mae(error_all_after_fusion$MIN)
rmse_max <- rmse(error_all_after_fusion$MAX)
mae_max <- mae(error_all_after_fusion$MAX)
rmse_mean <- rmse(error_all_after_fusion$MEAN)
mae_mean<- mae(error_all_after_fusion$MEAN)
rmse_rate <- min(rmse_min,rmse_max,rmse_mean)
if(rmse_rate == rmse_max ){
final_result_test_homo = list(unname(max_value),unname(error_max),"MAX",rmse_rate,mae_max)
}
if(rmse_rate == rmse_min ){
final_result_test_homo = list(unname(min_value),unname(error_min),"MIN",rmse_rate,mae_min)
}
if(rmse_rate == rmse_mean){
final_result_test_homo = list(unname(mean_value),unname(error_mean),"MEAN",rmse_rate,mae_mean)
}
result_usd <- as.tbl(result_HOMO_USD)
min_value <- min(result_usd$RMSE)
best_usd <- filter(result_usd, RMSE == min(result_usd$RMSE))
for (i in 1:length(result_usd$RMSE)) {
if(result_usd$RMSE[i]== min_value){
row_select <- i
}
}
predictor_order <- best_usd$Predictor_Order
neurons <- best_usd$Neurons
activation_func <- best_usd$Activation_Function
learning_rate <- best_usd$Learning_Rate
predict_value<- Result_USD_HOMO_LIST[[row_select]][[5]][[1]]       ##[[the row number in result_HOMO_*]][[5]][[1]]
predict_error <- Result_USD_HOMO_LIST[[row_select]][[5]][[2]]      ##[[the row number in result_HOMO_*]][[5]][[2]]
predict_value<- Result_USD_HOMO_LIST_80[[row_select]][[5]][[1]]       ##[[the row number in result_HOMO_*]][[5]][[1]]
predict_error <- Result_USD_HOMO_LIST_80[[row_select]][[5]][[2]]      ##[[the row number in result_HOMO_*]][[5]][[2]]
homo_model1_usd <- Result_USD_HOMO_LIST_80[[row_select]][[5]][[6]][[1]]   ##[[the row number in result_HOMO_*][[5]][[6]][[1]]
homo_model2_usd <- Result_USD_HOMO_LIST_80[[row_select]][[5]][[6]][[2]]   ##[[the row number in result_HOMO_*][[5]][[6]][[2]]
homo_model3_usd <- Result_USD_HOMO_LIST_80[[row_select]][[5]][[6]][[3]]   ##[[the row number in result_HOMO_*][[5]][[6]][[3]]
test_data <- data_set[[1]][[predictor_order-2]][[3]]                  ## [[currency]][[predictor_order-2]][[1:6]] 1.Traindata,
validate_data <- data_set[[1]][[predictor_order-2]][[2]]              # 2.Validate Data 3. TestData  4.validate_date 5. test_Date
non_normalize <- data_set[[1]][[predictor_order - 2]][[6]]
model_results <- neuralnet::compute(homo_model1_usd, test_data[1:predictor_order])
predicted_oneDayhead <- denormalized(model_results$net.result_usd,non_normalize)
model_results2 <- neuralnet::compute(homo_model2_usd, test_data[1:predictor_order])
predicted_oneDayhead2 <- denormalized(model_results2$net.result_usd,non_normalize)
model_results3 <- neuralnet::compute(homo_model3_usd, test_data[1:predictor_order])
predicted_oneDayhead3 <- denormalized(model_results3$net.result_usd,non_normalize)
all_predicted <- cbind(predicted_oneDayhead,predicted_oneDayhead2,predicted_oneDayhead3)
all_predicted <-as.data.frame(all_predicted)
actual <- denormalized(test_data[,predictor_order+1],non_normalize)
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
error_mean <- actual - mean_value
error_all_after_fusion <- as.data.frame(cbind(error_min,error_max,error_mean))
names(error_all_after_fusion) <- c("MIN","MAX","MEAN")
rmse_min <- rmse(error_all_after_fusion$MIN)
mae_min <- mae(error_all_after_fusion$MIN)
rmse_max <- rmse(error_all_after_fusion$MAX)
mae_max <- mae(error_all_after_fusion$MAX)
rmse_mean <- rmse(error_all_after_fusion$MEAN)
mae_mean<- mae(error_all_after_fusion$MEAN)
rmse_rate <- min(rmse_min,rmse_max,rmse_mean)
if(rmse_rate == rmse_max ){
final_result_test_homo = list(unname(max_value),unname(error_max),"MAX",rmse_rate,mae_max)
}
if(rmse_rate == rmse_min ){
final_result_test_homo = list(unname(min_value),unname(error_min),"MIN",rmse_rate,mae_min)
}
rmse_max <- rmse(error_all_after_fusion$MAX)
rmse_rate <- min(rmse_min,rmse_max,rmse_mean)
if(rmse_rate == rmse_max ){
final_result_test_homo = list(unname(max_value),unname(error_max),"MAX",rmse_rate,mae_max)
}
result_usd <- as.tbl(result_HOMO_USD)
min_value <- min(result_usd$RMSE)
result_usd <- as.tbl(result_HOMO_USD)
View(result_usd)
best_usd <- filter(result_usd, RMSE == min(result_usd$RMSE))
View(best_usd)
for (i in 1:length(result_usd$RMSE)) {
if(result_usd$RMSE[i]== min_value){
row_select <- i
}
}
predictor_order <- best_usd$Predictor_Order
neurons <- best_usd$Neurons
activation_func <- best_usd$Activation_Function
learning_rate <- best_usd$Learning_Rate
predict_value<- Result_USD_HOMO_LIST[[row_select]][[5]][[1]]       ##[[the row number in result_HOMO_*]][[5]][[1]]
predict_value<- Result_USD_HOMO_LIST_80[[row_select]][[5]][[1]]       ##[[the row number in result_HOMO_*]][[5]][[1]]
predict_error <- Result_USD_HOMO_LIST_80[[row_select]][[5]][[2]]      ##[[the row number in result_HOMO_*]][[5]][[2]]
homo_model1_usd <- Result_USD_HOMO_LIST_80[[row_select]][[5]][[6]][[1]]   ##[[the row number in result_HOMO_*][[5]][[6]][[1]]
homo_model2_usd <- Result_USD_HOMO_LIST_80[[row_select]][[5]][[6]][[2]]   ##[[the row number in result_HOMO_*][[5]][[6]][[2]]
homo_model3_usd <- Result_USD_HOMO_LIST_80[[row_select]][[5]][[6]][[3]]   ##[[the row number in result_HOMO_*][[5]][[6]][[3]]
test_data <- data_set[[1]][[predictor_order-2]][[3]]                  ## [[currency]][[predictor_order-2]][[1:6]] 1.Traindata,
validate_data <- data_set[[1]][[predictor_order-2]][[2]]              # 2.Validate Data 3. TestData  4.validate_date 5. test_Date
non_normalize <- data_set[[1]][[predictor_order - 2]][[6]]
model_results <- neuralnet::compute(homo_model1_usd, test_data[1:predictor_order])
predicted_oneDayhead <- denormalized(model_results$net.result_usd,non_normalize)
model_results2 <- neuralnet::compute(homo_model2_usd, test_data[1:predictor_order])
predicted_oneDayhead2 <- denormalized(model_results2$net.result_usd,non_normalize)
model_results3 <- neuralnet::compute(homo_model3_usd, test_data[1:predictor_order])
predicted_oneDayhead3 <- denormalized(model_results3$net.result_usd,non_normalize)
all_predicted <- cbind(predicted_oneDayhead,predicted_oneDayhead2,predicted_oneDayhead3)
model_results <- neuralnet::compute(homo_model1_usd, test_data[1:predictor_order])
predicted_oneDayhead <- denormalized(model_results$net.result_usd,non_normalize)
predicted_oneDayhead2 <- denormalized(model_results2$net.result,non_normalize)
predicted_oneDayhead3 <- denormalized(model_results3$net.result,non_normalize)
predicted_oneDayhead <- denormalized(model_results$net.result,non_normalize)
model_results <- neuralnet::compute(homo_model1_usd, test_data[1:predictor_order])
predicted_oneDayhead <- denormalized(model_results$net.result,non_normalize)
model_results2 <- neuralnet::compute(homo_model2_usd, test_data[1:predictor_order])
predicted_oneDayhead2 <- denormalized(model_results2$net.result,non_normalize)
model_results3 <- neuralnet::compute(homo_model3_usd, test_data[1:predictor_order])
predicted_oneDayhead3 <- denormalized(model_results3$net.result,non_normalize)
all_predicted <- cbind(predicted_oneDayhead,predicted_oneDayhead2,predicted_oneDayhead3)
all_predicted <-as.data.frame(all_predicted)
actual <- denormalized(test_data[,predictor_order+1],non_normalize)
View(all_predicted)
View(all_predicted)
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
error_mean <- actual - mean_value
error_all_after_fusion <- as.data.frame(cbind(error_min,error_max,error_mean))
names(error_all_after_fusion) <- c("MIN","MAX","MEAN")
rmse_min <- rmse(error_all_after_fusion$MIN)
mae_min <- mae(error_all_after_fusion$MIN)
rmse_max <- rmse(error_all_after_fusion$MAX)
mae_max <- mae(error_all_after_fusion$MAX)
rmse_mean <- rmse(error_all_after_fusion$MEAN)
mae_mean<- mae(error_all_after_fusion$MEAN)
rmse_rate <- min(rmse_min,rmse_max,rmse_mean)
if(rmse_rate == rmse_max ){
final_result_test_homo = list(unname(max_value),unname(error_max),"MAX",rmse_rate,mae_max)
}
if(rmse_rate == rmse_min ){
final_result_test_homo = list(unname(min_value),unname(error_min),"MIN",rmse_rate,mae_min)
}
if(rmse_rate == rmse_mean){
final_result_test_homo = list(unname(mean_value),unname(error_mean),"MEAN",rmse_rate,mae_mean)
}
result_hetro <- as.tbl(result_HETRO_USD)
result_hetro <- as.tbl(result_HETRO_USD)
min_hetro_value <- min(result_hetro$RMSE)
best_hetro_usd <- filter(result_hetro, RMSE == min_hetro_value)
for (i in 1:length(result_hetro$RMSE)) {
if(result_hetro$RMSE[i]== min_hetro_value){
row_select_hetro <- i
}
}
predictor_order_hetro <- best_hetro_usd$Predictor.Order
neurons_hetro <- best_hetro_usd$Neurons
activation_func_htero <- best_hetro_usd$Activation.Func
learning_rate_hetro <- best_hetro_usd$Learning.Rate
predict_value<- Result_USD_HETRO_LIST[[row_select]][[5]][[1]]       ##[[the row number in result_HOMO_*]][[5]][[1]]
predict_error <- Result_USD_HETRO_LIST[[row_select]][[5]][[2]]      ##[[the row number in result_HOMO_*]][[5]][[2]]
hetro_model1_usd <- Result_USD_HETRO_LIST[[row_select]][[5]][[6]][[1]]   ##[[the row number in result_HOMO_*][[5]][[6]][[1]]
hetro_model2_usd <- Result_USD_HETRO_LIST[[row_select]][[5]][[6]][[2]]   ##[[the row number in result_HOMO_*][[5]][[6]][[2]]
hetro_model3_usd <- Result_USD_HETRO_LIST[[row_select]][[5]][[6]][[3]]   ##[[the row number in result_HOMO_*][[5]][[6]][[3]]
predict_value<- Result_USD_HETRO_LIST_80[[row_select]][[5]][[1]]       ##[[the row number in result_HOMO_*]][[5]][[1]]
predict_error <- Result_USD_HETRO_LIST_80[[row_select]][[5]][[2]]      ##[[the row number in result_HOMO_*]][[5]][[2]]
hetro_model1_usd <- Result_USD_HETRO_LIST_80[[row_select]][[5]][[6]][[1]]   ##[[the row number in result_HOMO_*][[5]][[6]][[1]]
hetro_model2_usd <- Result_USD_HETRO_LIST_80[[row_select]][[5]][[6]][[2]]   ##[[the row number in result_HOMO_*][[5]][[6]][[2]]
hetro_model3_usd <- Result_USD_HETRO_LIST_80[[row_select]][[5]][[6]][[3]]   ##[[the row number in result_HOMO_*][[5]][[6]][[3]]
test_data <- data_set[[1]][[predictor_order-2]][[3]]                  ## [[currency]][[predictor_order-2]][[1:6]] 1.Traindata,
validate_data <- data_set[[1]][[predictor_order-2]][[2]]              # 2.Validate Data 3. TestData  4.validate_date 5. Test_Date
non_normalize <- data_set[[1]][[predictor_order - 2]][[6]]
model_results <- neuralnet::compute(hetro_model1_usd, test_data[1:predictor_order])
predicted_oneDayhead <- denormalized(model_results$net.result_usd,non_normalize)
test_input_array_1 <- list()
for (i in 1:predictor_order){
input_day <- as.matrix(test_data[,i])
test_input_array_1 <- c(test_input_array_1,input_day)
}
test_input_array_1 <- as.numeric(test_input_array_1)
test_input <- array( test_input_array_1, dim=c(dim(input_day),predictor_order) )
model_results2 <- predictr(hetro_model2_usd, test_input)
predicted_oneDayhead2 <- denormalized(model_results2,non_normalize)
test_input <- as.matrix(test_data[,1:predictor_order])
model_results3 <-  predict(hetro_model3_usd,test_input)
model_results3 <- as.vector(model_results3)
predicted_oneDayhead3 <- denormalized(model_results3,non_normalize)
all_predicted <- cbind(predicted_oneDayhead,predicted_oneDayhead2,predicted_oneDayhead3)
all_predicted <-as.data.frame(all_predicted)
actual <- denormalized(test_data[,predictor_order+1],non_normalize)
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
error_mean <- actual - mean_value
error_all_after_fusion <- as.data.frame(cbind(error_min,error_max,error_mean))
names(error_all_after_fusion) <- c("MIN","MAX","MEAN")
rmse_min <- rmse(error_all_after_fusion$MIN)
mae_min <- mae(error_all_after_fusion$MIN)
rmse_max <- rmse(error_all_after_fusion$MAX)
mae_max <- mae(error_all_after_fusion$MAX)
rmse_mean <- rmse(error_all_after_fusion$MEAN)
mae_mean<- mae(error_all_after_fusion$MEAN)
rmse_rate <- min(rmse_min,rmse_max,rmse_mean)
if(rmse_rate == rmse_max ){
final_result_test_hetro = list(unname(max_value),unname(error_max),"MAX",rmse_rate,mae_max)
}
if(rmse_rate == rmse_min ){
final_result_test_hetro = list(unname(min_value),unname(error_min),"MIN",rmse_rate,mae_min)
}
if(rmse_rate == rmse_mean){
final_result_test_hetro = list(unname(mean_value),unname(error_mean),"MEAN",rmse_rate,mae_mean)
}
rm(homo_model1,homo_model2,homo_model3)
View(best_hetro_usd)
rm(best)
View(best_usd)
model_results <- neuralnet::compute(hetro_model1_usd, test_data[1:predictor_order])
predicted_oneDayhead <- denormalized(model_results$net.result,non_normalize)
test_input_array_1 <- list()
for (i in 1:predictor_order){
input_day <- as.matrix(test_data[,i])
test_input_array_1 <- c(test_input_array_1,input_day)
}
test_input_array_1 <- as.numeric(test_input_array_1)
test_input <- array( test_input_array_1, dim=c(dim(input_day),predictor_order) )
model_results2 <- predictr(hetro_model2_usd, test_input)
predicted_oneDayhead2 <- denormalized(model_results2,non_normalize)
test_input <- as.matrix(test_data[,1:predictor_order])
model_results3 <-  predict(hetro_model3_usd,test_input)
model_results3 <- as.vector(model_results3)
predicted_oneDayhead3 <- denormalized(model_results3,non_normalize)
all_predicted <- cbind(predicted_oneDayhead,predicted_oneDayhead2,predicted_oneDayhead3)
all_predicted <-as.data.frame(all_predicted)
actual <- denormalized(test_data[,predictor_order+1],non_normalize)
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
error_mean <- actual - mean_value
error_all_after_fusion <- as.data.frame(cbind(error_min,error_max,error_mean))
names(error_all_after_fusion) <- c("MIN","MAX","MEAN")
rmse_min <- rmse(error_all_after_fusion$MIN)
mae_min <- mae(error_all_after_fusion$MIN)
rmse_max <- rmse(error_all_after_fusion$MAX)
mae_max <- mae(error_all_after_fusion$MAX)
rmse_mean <- rmse(error_all_after_fusion$MEAN)
mae_mean<- mae(error_all_after_fusion$MEAN)
rmse_rate <- min(rmse_min,rmse_max,rmse_mean)
if(rmse_rate == rmse_max ){
final_result_test_hetro = list(unname(max_value),unname(error_max),"MAX",rmse_rate,mae_max)
}
if(rmse_rate == rmse_min ){
final_result_test_hetro = list(unname(min_value),unname(error_min),"MIN",rmse_rate,mae_min)
}
if(rmse_rate == rmse_mean){
final_result_test_hetro = list(unname(mean_value),unname(error_mean),"MEAN",rmse_rate,mae_mean)
}
train_per <- 0.8
data_set <- data_spliting(url,train_per)
train_dataset <- list()
validate_dataset <- list()
train_dataset <- list()
validate_dataset <- list()
validate_date <- list()
non_normalize <- list()
result_usd <- list()
actual_value <- list()
train_dataset <- list()
validate_dataset <- list()
predictor_order <- seq(3,10,1)
validate_date <- list()
non_normalize <- list()
result_usd <- list()
actual_value <- list()
learning_rate <- seq(0.1,1,0.1)
activation_func <- c("logistic", "tanh")
source("HOMO.R")
Result_USD_HOMO_LIST_80 <- list()
count <- 1
count2 <- 1
for (i in 1:length(predictor_order)) {
result_HOMO_USD <- data.frame("Predictor_Order"=numeric(),"Neurons"=numeric(),"RMSE"=numeric(),
"MAE"=numeric(),"Activation_Function"=character(),"Learning_Rate"=numeric(),
stringsAsFactors=FALSE)
non_normalize_PO <- data.frame()
validate_date_PO <- data.frame()
actual_value_PO <- data.frame()
result__value_PO <- list()
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
validate_dataset[[i]] <- data_set[[1]][[i]][[2]]
validate_date[[i]] <- data_set[[1]][[i]][[4]]
non_normalize[[i]]<- data_set[[1]][[i]][[6]]
actual_value[[i]] <- validate_dataset[[i]][,i+3]
if(predictor_order[i]==3){ neurons<-seq(2,20,1)}
if(predictor_order[i]==4){ neurons<-seq(3,20,1)}
if(predictor_order[i]==5){ neurons<-seq(3,20,1)}
if(predictor_order[i]==6){ neurons<-seq(4,20,1)}
if(predictor_order[i]==7){ neurons<-seq(4,20,1)}
if(predictor_order[i]==8){ neurons<-seq(5,20,1)}
if(predictor_order[i]==9){ neurons<-seq(5,20,1)}
if(predictor_order[i]==10){ neurons<-seq(6,20,1)}
for (l in 1:length(learning_rate) ){
for (k in 1:length(activation_func)) {
for (j in 1:length(neurons)) {
train_dataset_PO <- train_dataset[[i]]
validate_dataset_PO <- validate_dataset[[i]]
validate_date_PO <- validate_date[[i]]
non_normalize_PO <-   non_normalize[[i]]
actual_value_PO <-  actual_value[[i]]
result__value_PO[[j]] <-  HOMO(train_dataset_PO,validate_dataset_PO, non_normalize_PO,
neurons = neurons[j], predictor_order[i],
activation_func[k],learning_rate[l])
result_HOMO_USD[count2,] <-c(predictor_order[i],neurons[j],
result__value_PO[[j]][4],result__value_PO[[j]][5],
activation_func[k],learning_rate[l])
Result_USD_HOMO_LIST_80[[count]] <- list(predictor_order[i],neurons[j],learning_rate[l],
activation_func[k], result__value_PO[[j]])
count <- count +1
count2 <- count2 +1
}
}
}
}
