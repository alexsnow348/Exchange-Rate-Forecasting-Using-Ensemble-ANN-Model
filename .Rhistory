sigmoid = "logistic",
use_bias = T,
hidden_dim  = 3
)
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
use_bias = T,
hidden_dim  = 10
)
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
use_bias = T,
hidden_dim  = 4
)
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
use_bias = T,
hidden_dim  = 5
)
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
use_bias = T,
hidden_dim  = 3
)
library("rnn")
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
train_dataset <- dataset[[1]]
usd_non_normalize <- dataset[[4]]
input_day1 <- as.matrix(train_dataset[,1])
input_day2 <- as.matrix(train_dataset[,2])
input_day3 <- as.matrix(train_dataset[,3])
output_matrix <- as.matrix(train_dataset[,4])
input_try <- array( c(input_day1,input_day2,input_day3) , dim=c(dim(input_day1),1) )
output_try <- array(output_matrix, dim=c(dim(output_matrix),1))
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
use_bias = T,
hidden_dim  = 3
)
test_input_day1 <- as.matrix(test_dataset[,1])
test_input_day2 <- as.matrix(test_dataset[,2])
test_input_day3 <- as.matrix(test_dataset[,3])
test_input_try <- array( c(input_day1,input_day2,input_day3) , dim=c(dim(input_day1),1) )
test_result <- predictr(model, test_input_try )
str(test_result)
predict_value <- as.data.frame(denormalized(test_result))
View(predict_value)
View(predict_value)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
View(error)
rmse(error)
mse(error)
mae(error)
str(error)
library("rnn")
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## Training
input_day1 <- as.matrix(train_dataset[,1])
input_day2 <- as.matrix(train_dataset[,2])
input_day3 <- as.matrix(train_dataset[,3])
output_matrix <- as.matrix(train_dataset[,4])
input_try <- array( c(input_day1,input_day2,input_day3) , dim=c(dim(input_day1),1) )
output_try <- array(output_matrix, dim=c(dim(output_matrix),1))
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
use_bias = T,
hidden_dim  = 2
)
test_input_day1 <- as.matrix(test_dataset[,1])
test_input_day2 <- as.matrix(test_dataset[,2])
test_input_day3 <- as.matrix(test_dataset[,3])
test_input_try <- array( c(input_day1,input_day2,input_day3) , dim=c(dim(input_day1),1) )
test_result <- predictr(model, test_input_try )
predict_value <- as.data.frame(denormalized(test_result))
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
rmse(error)
hist(  actual-predict_value )
library("rnn")
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## Training
input_day1 <- as.matrix(train_dataset[,1])
input_day2 <- as.matrix(train_dataset[,2])
input_day3 <- as.matrix(train_dataset[,3])
output_matrix <- as.matrix(train_dataset[,4])
input_try <- array( c(input_day1,input_day2,input_day3) , dim=c(dim(input_day1),1) )
output_try <- array(output_matrix, dim=c(dim(output_matrix),1))
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
use_bias = T,
hidden_dim  = 2
)
## Testing
test_input_day1 <- as.matrix(test_dataset[,1])
test_input_day2 <- as.matrix(test_dataset[,2])
test_input_day3 <- as.matrix(test_dataset[,3])
test_input_try <- array( c(input_day1,input_day2,input_day3) , dim=c(dim(input_day1),1) )
test_result <- predictr(model, test_input_try )
predict_value <- as.data.frame(denormalized(test_result))
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist(  actual-predict_value )
rmse(error)
hist( actual-predict_value )
str(actual)
str(predict_value)
467*3
467*2
predict_value <- (denormalized(test_result))
View(predict_value)
str(test_input_try)
str(test_input_try1)
str(test_input_day1)
701/467
library("rnn")
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## Training
input_day1 <- as.matrix(train_dataset[,1])
input_day2 <- as.matrix(train_dataset[,2])
input_day3 <- as.matrix(train_dataset[,3])
output_matrix <- as.matrix(train_dataset[,4])
input_try <- array( c(input_day1,input_day2,input_day3) , dim=c(dim(input_day1),1) )
output_try <- array(output_matrix, dim=c(dim(output_matrix),1))
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
use_bias = T,
hidden_dim  = 2
)
## Testing
test_input_day1 <- as.matrix(test_dataset[,1])
test_input_day2 <- as.matrix(test_dataset[,2])
test_input_day3 <- as.matrix(test_dataset[,3])
test_input_try <- array( c(test_input_day1,test_input_day2,test_input_day3) , dim=c(dim(input_day1),1) )
test_result <- predictr(model, test_input_try )
predict_value <- (denormalized(test_result))
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist( actual-predict_value )
rmse(error)
test_input_day1 <- as.matrix(test_dataset[,1])
test_input_day2 <- as.matrix(test_dataset[,2])
test_input_day3 <- as.matrix(test_dataset[,3
test_input_try <- array( c(test_input_day1,test_input_day2,test_input_day3) , dim=c(dim(test_input_day3),1) )
test_input_day3 <- as.matrix(test_dataset[,3])
test_input_try <- array( c(test_input_day1,test_input_day2,test_input_day3) , dim=c(dim(test_input_day3),1) )
test_result <- predictr(model, test_input_try )
predict_value <- (denormalized(test_result))
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist( actual-predict_value )
rmse(error)
library("rnn")
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## Training
input_day1 <- as.matrix(train_dataset[,1])
input_day2 <- as.matrix(train_dataset[,2])
input_day3 <- as.matrix(train_dataset[,3])
output_matrix <- as.matrix(train_dataset[,4])
input_try <- array( c(input_day1,input_day2,input_day3) , dim=c(dim(input_day1),1) )
output_try <- array(output_matrix, dim=c(dim(output_matrix),1))
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
use_bias = T,
hidden_dim  = 10
)
#Main Modeling & Training and Validation
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## HOMOGENEOUS MODEL
## Train the network using neuralnet (First MLP)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 2)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- as.data.frame(denormalized(predicted_oneDayhead))
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist(error)
str(error)
hist(actual - predict_value)
predict_value <- denormalized(predicted_oneDayhead)
error <- actual - predict_value
hist(actual - predict_value)
library("rnn")
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## Training
input_day1 <- as.matrix(train_dataset[,1])
input_day2 <- as.matrix(train_dataset[,2])
input_day3 <- as.matrix(train_dataset[,3])
output_matrix <- as.matrix(train_dataset[,4])
input_try <- array( c(input_day1,input_day2,input_day3) , dim=c(dim(input_day1),1) )
output_try <- array(output_matrix, dim=c(dim(output_matrix),1))
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 10
)
test_input_day1 <- as.matrix(test_dataset[,1])
test_input_day2 <- as.matrix(test_dataset[,2])
test_input_day3 <- as.matrix(test_dataset[,3])
test_input_try <- array( c(test_input_day1,test_input_day2,test_input_day3) , dim=c(dim(test_input_day3),1) )
test_result <- predictr(model, test_input_try )
predict_value <- (denormalized(test_result))
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist( actual-predict_value )
rmse(error)
library("rnn")
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## Training
input_day1 <- as.matrix(train_dataset[,1])
input_day2 <- as.matrix(train_dataset[,2])
input_day3 <- as.matrix(train_dataset[,3])
output_matrix <- as.matrix(train_dataset[,4])
input_try <- array( c(input_day1,input_day2,input_day3) , dim=c(dim(input_day1),1) )
output_try <- array(output_matrix, dim=c(dim(output_matrix),1))
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 4
)
## Testing
test_input_day1 <- as.matrix(test_dataset[,1])
test_input_day2 <- as.matrix(test_dataset[,2])
test_input_day3 <- as.matrix(test_dataset[,3])
test_input_try <- array( c(test_input_day1,test_input_day2,test_input_day3) , dim=c(dim(test_input_day3),1) )
test_result <- predictr(model, test_input_try )
predict_value <- (denormalized(test_result))
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist( actual-predict_value )
rmse(error)
#Main Modeling & Training and Validation
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## HOMOGENEOUS MODEL
## Train the network using neuralnet (First MLP)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 2)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- denormalized(predicted_oneDayhead)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist(actual - predict_value)
rmse(error)
#Main Modeling & Training and Validation
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## HOMOGENEOUS MODEL
## Train the network using neuralnet (First MLP)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 2)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- denormalized(predicted_oneDayhead)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist(actual - predict_value)
rmse(error)
#Main Modeling & Training and Validation
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## HOMOGENEOUS MODEL
## Train the network using neuralnet (First MLP)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 2)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- denormalized(predicted_oneDayhead)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist(actual - predict_value)
rmse(error)
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"U.S. Dollar")
#Main Modeling & Training and Validation
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## HOMOGENEOUS MODEL
## Train the network using neuralnet (First MLP)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 2)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- denormalized(predicted_oneDayhead)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist(actual - predict_value)
rmse(error)
#Main Modeling & Training and Validation
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## HOMOGENEOUS MODEL
## Train the network using neuralnet (First MLP)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- denormalized(predicted_oneDayhead)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist(actual - predict_value)
rmse(error)
actual <- c(4, 6, 9, 10, 4, 6, 4, 7, 8, 7)
predicted <- c(5, 6, 8, 10, 4, 8, 4, 9, 8, 9)
error <- actual - predicted
rmse(error)
mae(error)
predicted <- c(4, 6, 9, 10, 4, 6, 4, 7, 8, 7)
error <- actual - predicted
rmse(error)
mae(error)
#Main Modeling & Training and Validation
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## HOMOGENEOUS MODEL
## Train the network using neuralnet (First MLP)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- denormalized(predicted_oneDayhead)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist(actual - predict_value)
rmse(error)
mae(error)
weight <- sample(0:1,3,replace = T)
weight <- sample(1:10,3,replace = T)
weight <- sample(1:10,3,replace = F)
weight = normalizeData(weight, type = "0_1")
weight <- sample(1:10,3,replace = F)
weight = normalizeData(weight, type = "0_1")
weight <- sample(1:10,3,replace = F)
weight = normalizeData(weight, type = "0_1")
?normalizeData
weight = normalizeData(weight, type = "norm")
weight <- sample(1:10,3,replace = F)
weight = normalizeData(weight, type = "norm")
data = train_dataset, hidden = 3, learningrate = 0.1 , startweights = weight )
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3, learningrate = 0.1 , startweights = weight )
data = train_dataset, hidden = 3, learningrate = 0.1 )
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3, learningrate = 0.1 )
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3, learningrate = 0.1 )
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3, learningrate = 0.1 )
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3, learningrate = 0.1 )
exchange_model2
weight <- sample(1:10,length(train_dataset[,1]),replace = F)
size =length(train_dataset[,1])
weight <- sample(1:10,size,replace = F)
weight <- sample(1:10,size = size,replace = F)
weight <- sample(1:1000,size = size,replace = F)
weight = normalizeData(weight, type = "norm")
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3, learningrate = 0.1, startweights = weight )
head(weight)
weight = normalizeData(weight, type = "0_1")
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3, learningrate = 0.1, startweights = weight )
head(weight)
model_results2 <- neuralnet::compute(exchange_model2, test_dataset[1:3])
predicted_oneDayhead2 <- model_results2$net.result
predict_value2 <- denormalized(predicted_oneDayhead2)
error2 <- actual - predict_value2
hist(actual - predict_value2)
rmse(error2)
mae(error2)
data = train_dataset, hidden = 3, learningrate = 0.1 )
#Main Modeling & Training and Validation
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3, learningrate = 0.1 )
model_results2 <- neuralnet::compute(exchange_model2, test_dataset[1:3])
predicted_oneDayhead2 <- model_results2$net.result
predict_value2 <- denormalized(predicted_oneDayhead2)
error2 <- actual - predict_value2
hist(actual - predict_value2)
rmse(error2)
mae(error2)
actual <- denormalized(test_dataset[,4])
error2 <- actual - predict_value2
hist(actual - predict_value2)
rmse(error2)
mae(error2)
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3 )
model_results2 <- neuralnet::compute(exchange_model2, test_dataset[1:3])
predicted_oneDayhead2 <- model_results2$net.result
predict_value2 <- denormalized(predicted_oneDayhead2)
actual <- denormalized(test_dataset[,4])
error2 <- actual - predict_value2
hist(actual - predict_value2)
rmse(error2)
mae(error2)
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 2)
model_results2 <- neuralnet::compute(exchange_model2, test_dataset[1:3])
predicted_oneDayhead2 <- model_results2$net.result
predict_value2 <- denormalized(predicted_oneDayhead2)
actual <- denormalized(test_dataset[,4])
error2 <- actual - predict_value2
hist(actual - predict_value2)
rmse(error2)
mae(error2)
