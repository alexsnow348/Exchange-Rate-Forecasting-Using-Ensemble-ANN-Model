newdata = tbl_df(usd)
usd_df = select(newdata, Date, Value)
usd_non_normalize = select(usd_df, Value)
usd_value = as.tbl(normalized(usd_non_normalize))
names(usd_value) = "USD"
result =  createTimeSlices(usd_value$USD, 3, 1, fixedWindow = T)
train_data = training_data(result, usd_value)
vector_train = as.vector(train_data$USD,"any")
matrix_train <- matrix(vector_train, nrow = 3 , ncol = length(vector_train)/3)
#Predicted Date
Date = createTimeSlices(usd$Date, 3, 1, fixedWindow = T)
test_date = testing_data(Date,usd)
#Class Variable
test_data =  testing_data(result,usd_value)
actual_date_and_value = select(usd, Date, Value)
#input_train 60 % && output_train 60 %
training_input = matrix_train[1:3, 1:701]
training_output = test_data[1:701,]
new_input = t(training_input)
train_input = as.data.frame(new_input)
train_dataset <- cbind(train_input, training_output)
names(train_dataset) <- c("firstDay","secondDay", "thirdDay", "oneDayAhead")
#input_test 40% && output_test 40%
testing_input = matrix_train[1:3, 702:1168]
testing_output = test_data[702:1168,]
new_input = t(testing_input)
test_input = as.data.frame(new_input)
test_dataset = cbind(test_input, testing_output)
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "oneDayAhead")
output <- list(train_dataset,test_dataset)
}
Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv")
dataset <- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
View(test_dataset)
View(train_dataset)
View(test_dataset)
View(train_dataset)
View(test_dataset)
View(train_dataset)
View(test_dataset)
View(train_dataset)
matrix(1,1)
a<- matrix(1,1)
length(a)
a<- matrix(1,2)
length(a)
length(a)*0.6
int(length(a)*0.6)
ceiling(length(a)*0.6)
Data_Processing <- function(datasource_url, predictor_order, currency){ r
alldata = tbl_df(read.csv(datasource_url))
usd = filter(alldata, currency)
newdata = tbl_df(usd)
usd_df = select(newdata, Date, Value)
usd_non_normalize = select(usd_df, Value)
usd_value = as.tbl(normalized(usd_non_normalize))
names(usd_value) = "USD"
result =  createTimeSlices(usd_value$USD, predictor_order, 1, fixedWindow = T)
train_data = training_data(result, usd_value)
vector_train = as.vector(train_data$USD,"any")
matrix_train <- matrix(vector_train, nrow = predictor_order , ncol = length(vector_train)/predictor_order)
#Predicted Date
Date = createTimeSlices(usd$Date, predictor_order, 1, fixedWindow = T)
test_date = testing_data(Date,usd)
#Class Variable
test_data =  testing_data(result,usd_value)
#input_train 60 % && output_train 60 %
training_input = matrix_train[1:predictor_order, 1:ceiling(length(matrix_train)*0.6)]
training_output = test_data[1:ceiling(length(test_data)*0.6),]
new_input = t(training_input)
train_input = as.data.frame(new_input)
train_dataset <- cbind(train_input, training_output)
names(train_dataset) <- c("firstDay","secondDay", "thirdDay", "oneDayAhead")
#input_test 40% && output_test 40%
testing_input = matrix_train[1:predictor_order, ceiling(length(matrix_train)*0.6)+1:length(matrix_train)]
testing_output = test_data[ceiling(length(test_data)*0.6):length(test_data),]
new_input = t(testing_input)
test_input = as.data.frame(new_input)
test_dataset = cbind(test_input, testing_output)
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "oneDayAhead")
output <- list(train_dataset,test_dataset,test_date)
}
a<- Data_Processing( "/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv", 3, "U.S. Dollar")
Data_Processing <- function(datasource_url, predictor_order, currency){
alldata = tbl_df(read.csv(datasource_url))
usd = filter(alldata, currency)
newdata = tbl_df(usd)
usd_df = select(newdata, Date, Value)
usd_non_normalize = select(usd_df, Value)
usd_value = as.tbl(normalized(usd_non_normalize))
names(usd_value) = "USD"
result =  createTimeSlices(usd_value$USD, predictor_order, 1, fixedWindow = T)
train_data = training_data(result, usd_value)
vector_train = as.vector(train_data$USD,"any")
matrix_train <- matrix(vector_train, nrow = predictor_order , ncol = length(vector_train)/predictor_order)
#Predicted Date
Date = createTimeSlices(usd$Date, predictor_order, 1, fixedWindow = T)
test_date = testing_data(Date,usd)
#Class Variable
test_data =  testing_data(result,usd_value)
#input_train 60 % && output_train 60 %
training_input = matrix_train[1:predictor_order, 1:ceiling(length(matrix_train)*0.6)]
training_output = test_data[1:ceiling(length(test_data)*0.6),]
new_input = t(training_input)
train_input = as.data.frame(new_input)
train_dataset <- cbind(train_input, training_output)
names(train_dataset) <- c("firstDay","secondDay", "thirdDay", "oneDayAhead")
#input_test 40% && output_test 40%
testing_input = matrix_train[1:predictor_order, ceiling(length(matrix_train)*0.6)+1:length(matrix_train)]
testing_output = test_data[ceiling(length(test_data)*0.6):length(test_data),]
new_input = t(testing_input)
test_input = as.data.frame(new_input)
test_dataset = cbind(test_input, testing_output)
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "oneDayAhead")
output <- list(train_dataset,test_dataset,test_date)
}
a<- Data_Processing( "/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv", 3, "U.S. Dollar")
Data_Processing <- function(datasource_url, predictor_order, ex_currency){
alldata = tbl_df(read.csv(datasource_url))
usd = filter(alldata, currency == ex_currency)
newdata = tbl_df(usd)
usd_df = select(newdata, Date, Value)
usd_non_normalize = select(usd_df, Value)
usd_value = as.tbl(normalized(usd_non_normalize))
names(usd_value) = "USD"
result =  createTimeSlices(usd_value$USD, predictor_order, 1, fixedWindow = T)
train_data = training_data(result, usd_value)
vector_train = as.vector(train_data$USD,"any")
matrix_train <- matrix(vector_train, nrow = predictor_order , ncol = length(vector_train)/predictor_order)
#Predicted Date
Date = createTimeSlices(usd$Date, predictor_order, 1, fixedWindow = T)
test_date = testing_data(Date,usd)
#Class Variable
test_data =  testing_data(result,usd_value)
#input_train 60 % && output_train 60 %
training_input = matrix_train[1:predictor_order, 1:ceiling(length(matrix_train)*0.6)]
training_output = test_data[1:ceiling(length(test_data)*0.6),]
new_input = t(training_input)
train_input = as.data.frame(new_input)
train_dataset <- cbind(train_input, training_output)
names(train_dataset) <- c("firstDay","secondDay", "thirdDay", "oneDayAhead")
#input_test 40% && output_test 40%
testing_input = matrix_train[1:predictor_order, ceiling(length(matrix_train)*0.6)+1:length(matrix_train)]
testing_output = test_data[ceiling(length(test_data)*0.6):length(test_data),]
new_input = t(testing_input)
test_input = as.data.frame(new_input)
test_dataset = cbind(test_input, testing_output)
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "oneDayAhead")
output <- list(train_dataset,test_dataset,test_date)
}
a<- Data_Processing( "/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv", 3, "U.S. Dollar")
alldata = tbl_df(read.csv("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv"))
usd = filter(alldata, currency == "U.S. Dollar" )
newdata = tbl_df(usd)
usd_df = select(newdata, Date, Value)
usd_non_normalize = select(usd_df, Value)
usd_value = as.tbl(normalized(usd_non_normalize))
names(usd_value) = "USD"
result =  createTimeSlices(usd_value$USD, 3, 1, fixedWindow = T)
train_data = training_data(result, usd_value)
vector_train = as.vector(train_data$USD,"any")
matrix_train <- matrix(vector_train, nrow = 3 , ncol = length(vector_train)/predictor_order)
Date = createTimeSlices(usd$Date, 3, 1, fixedWindow = T)
test_date = testing_data(Date,usd)
matrix_train <- matrix(vector_train, nrow = 3 , ncol = length(vector_train)/3)
Date = createTimeSlices(usd$Date, 3, 1, fixedWindow = T)
test_date = testing_data(Date,usd)
test_data =  testing_data(result,usd_value)
training_input = matrix_train[1:3, 1:ceiling(length(matrix_train)*0.6)]
length(matrix_train)
length(matrix_train)*0.6
ceiling(length(matrix_train)*0.6)
train_until = ceiling(length(matrix_train)*0.6)
training_input = matrix_train[1:3, 1:train_until]
train_until = ceiling(length(matrix_train)*0.6/3)
training_input = matrix_train[1:3, 1:train_until]
training_output = test_data[1:ceiling(length(test_data)*0.6/3),]
training_input = matrix_train[1:3, 1:train_until]
View(training_output)
View(training_output)
train_until
train_until
training_input = matrix_train[1:3, 1:train_until]
training_input = matrix_train[1:3, 1:ceiling(length(matrix_train)*0.6/3)]
View(training_input)
View(training_output)
train_end = ceiling(length(test_data)*0.6/3)
train_end
length(test_data)
test_date = testing_data(Date,usd)
training_output = test_data[1:ceiling(length(test_data)*0.6/3),]
test_data =  testing_data(result,usd_value)
training_output = test_data[1:ceiling(length(test_data)*0.6/3),]
test_data[1]
length(test_data[1])
length(test_data[1,])
length(test_data[,1])
length(test_data$USD)
training_output = test_data[1:ceiling(length(test_data$USD)*0.6/3),]
training_output = test_data[1:ceiling(length(test_data$USD)*0.6),]
new_input = t(training_input)
train_input = as.data.frame(new_input)
train_dataset <- cbind(train_input, training_output)
names(train_dataset) <- c("firstDay","secondDay", "thirdDay", "oneDayAhead")
predictor_order <-3
testing_input = matrix_train[1:predictor_order, ceiling(length(matrix_train)*0.4/predictor_order)+1:length(matrix_train)]
ceiling(length(matrix_train)*0.4/predictor_order)
testing_input = matrix_train[1:predictor_order, ceiling(length(matrix_train)*0.4/predictor_order):length(matrix_train)]
length(matrix_train)*0.4/predictor_order
ceiling(length(test_data$USD)*0.4)
length(test_data$USD
)
1168-701
floor(length(matrix_train)*0.4/predictor_order
)
ceiling(floor(test_data$USD)*0.4)
floor(length(test_data$USD
)
)
floor(length(test_data$USD)*0.4)
testing_input = matrix_train[1:predictor_order, floor(length(matrix_train)*0.4/predictor_order):length(matrix_train)]
testing_input = matrix_train[1:predictor_order, tarin_until+1:length(matrix_train)]
testing_input = matrix_train[1:predictor_order, train_until+1:length(matrix_train)]
predictor_order
length(matrix_train)
testing_input = matrix_train[1:predictor_order, train_until+1:length(matrix_train)/predictor_order]
length(matrix_train)/predictor_order
train_until+1
testing_input = matrix_train[1:predictor_order, train_until+1:length(matrix_train)/predictor_order]
matrix_train[1:predictor_order, train_until+1:length(matrix_train)/predictor_order]
train_end = ceiling(length(test_data$USD)
))
train_end = ceiling(length(test_data$USD)*0.6)
testing_input = matrix_train[1:predictor_order, train_until+1:length(matrix_train)/predictor_order]
train_until+1
length(matrix_train)/predictor_order
a<-matrix_train[1:3, 702:1168]
View(a)
View(a)
testing_input = matrix_train[1:predictor_order, test_until: length(matrix_train)/predictor_order]
test_until <- train_until+1
test_end <- train_end+1
testing_input = matrix_train[1:predictor_order, test_until: length(matrix_train)/predictor_order]
testing_output = test_data[test_end:length(test_data$USD),]
View(test_dataset)
View(test_date)
date = testing_data(Date,usd)
test_date = date[test_end:length(test_data$USD),]$Date
test_date = as.data.frame(date[test_end:length(test_data$USD),]$Date)
View(test_date)
names(test_date)= "Date"
View(test_date)
new_input = t(testing_input)
test_input = as.data.frame(new_input)
test_dataset = cbind(test_input, testing_output)
View(training_input)
View(new_input)
testing_input = matrix_train[1:predictor_order, test_until: length(matrix_train)/predictor_order]
testing_output = test_data[test_end:length(test_data$USD),]
new_input = t(testing_input)
testing_input = matrix_train[1:predictor_order, test_until: length(matrix_train)/predictor_order]
test_until
length(matrix_train)/predictor_order
1168-702
matrix_end <- length(matrix_train)/predictor_order
testing_input = matrix_train[1:predictor_order, test_until: matrix_end]
new_input = t(testing_input)
test_input = as.data.frame(new_input)
test_dataset = cbind(test_input, testing_output)
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "oneDayAhead")
output <- list(train_dataset,test_dataset,test_date)
Data_Processing <- function(datasource_url, predictor_order, ex_currency){
alldata = tbl_df(read.csv(datasource_url))
usd = filter(alldata, currency ==ex_currency  )
newdata = tbl_df(usd)
usd_df = select(newdata, Date, Value)
usd_non_normalize = select(usd_df, Value)
usd_value = as.tbl(normalized(usd_non_normalize))
names(usd_value) = "USD"
result =  createTimeSlices(usd_value$USD, predictor_order, 1, fixedWindow = T)
train_data = training_data(result, usd_value)
vector_train = as.vector(train_data$USD,"any")
matrix_train <- matrix(vector_train, nrow = predictor_order, ncol = length(vector_train)/predictor_order)
#Predicted Date
Date = createTimeSlices(usd$Date, predictor_order, 1, fixedWindow = T)
date = testing_data(Date,usd)
test_date = as.data.frame(date[test_end:length(test_data$USD),]$Date)
names(test_date)= "Date"
#Class Variable
test_data =  testing_data(result,usd_value)
#input_train 60 % && output_train 60 %
train_until = ceiling(length(matrix_train)*0.6/predictor_order)
training_input = matrix_train[1:predictor_order, 1:train_until]
train_end = ceiling(length(test_data$USD)*0.6)
training_output = test_data[1:train_end,]
new_input = t(training_input)
train_input = as.data.frame(new_input)
train_dataset <- cbind(train_input, training_output)
names(train_dataset) <- c("firstDay","secondDay", "thirdDay", "oneDayAhead")
#input_test 40% && output_test 40%
test_until <- train_until+1
test_end <- train_end+1
matrix_end <- length(matrix_train)/predictor_order
testing_input = matrix_train[1:predictor_order, test_until: matrix_end]
testing_output = test_data[test_end:length(test_data$USD),]
new_input = t(testing_input)
test_input = as.data.frame(new_input)
test_dataset = cbind(test_input, testing_output)
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "oneDayAhead")
output <- list(train_dataset,test_dataset,test_date)
}
a<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"U.S. Dollar")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
View(date)
View(test_dataset)
View(test_date)
source("requried_functions_N_libraries.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",4,"U.S. Dollar")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",4,"U.S. Dollar")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",4,"U.S. Dollar")
alldata = tbl_df(read.csv("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv"))
alldata = tbl_df(read.csv("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv"))
usd = filter(alldata, currency =="U.S. Dollar"   )
predictor_order <- 4
newdata = tbl_df(usd)
usd_df = select(newdata, Date, Value)
usd_non_normalize = select(usd_df, Value)
usd_value = as.tbl(normalized(usd_non_normalize))
names(usd_value) = "USD"
result =  createTimeSlices(usd_value$USD, predictor_order, 1, fixedWindow = T)
train_data = training_data(result, usd_value)
vector_train = as.vector(train_data$USD,"any")
matrix_train <- matrix(vector_train, nrow = predictor_order, ncol = length(vector_train)/predictor_order)
Date = createTimeSlices(usd$Date, predictor_order, 1, fixedWindow = T)
date = testing_data(Date,usd)
test_date = as.data.frame(date[test_end:length(test_data$USD),]$Date)
names(test_date)= "Date"
#Class Variable
test_data =  testing_data(result,usd_value)
test_data =  testing_data(result,usd_value)
train_until = ceiling(length(matrix_train)*0.6/predictor_order)
train_end = ceiling(length(test_data$USD)*0.6)
training_output = test_data[1:train_end,]
new_input = t(training_input)
train_input = as.data.frame(new_input)
train_dataset <- cbind(train_input, training_output)
training_input = matrix_train[1:predictor_order, 1:train_until]
new_input = t(training_input)
train_input = as.data.frame(new_input)
train_dataset <- cbind(train_input, training_output)
names(train_dataset) <- c("firstDay","secondDay", "thirdDay", "oneDayAhead")
test_until <- train_until+1
test_end <- train_end+1
matrix_end <- length(matrix_train)/predictor_order
testing_input = matrix_train[1:predictor_order, test_until: matrix_end]
testing_output = test_data[test_end:length(test_data$USD),]
new_input = t(testing_input)
test_input = as.data.frame(new_input)
test_dataset = cbind(test_input, testing_output)
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "oneDayAhead")
Date = createTimeSlices(usd$Date, predictor_order, 1, fixedWindow = T)
date = testing_data(Date,usd)
test_date = as.data.frame(date[test_end:length(test_data$USD),]$Date)
names(test_date)= "Date"
output <- list(train_dataset,test_dataset,test_date)
a<-output[[1]]
b<-output[[2]]
c<-output[[3]]
View(a)
View(a)
View(b)
View(c)
View(b)
View(a)
View(b)
View(c)
View(a)
1168/4
length(vector_train)
switch(type,
mean = 1,
median = 2,
trimmed = 3)
else if (predictor_order==4){
names(train_dataset) <- c("firstDay","secondDay", "thirdDay","fourthDay", "oneDayAhead")
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "fourthDay","oneDayAhead")
}
?elseif
if(predictor_order==4){
names(train_dataset) <- c("firstDay","secondDay", "thirdDay","fourthDay", "oneDayAhead")
names(test_dataset) <- c("firstDay","secondDay", "thirdDay", "fourthDay","oneDayAhead")
}
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",4,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
View(test_dataset)
View(train_dataset)
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",5,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
View(date)
View(test_dataset)
View(train_dataset)
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",6,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
View(date)
View(test_dataset)
View(train_dataset)
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",7,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
View(test_dataset)
View(train_dataset)
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",8,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
View(test_dataset)
View(train_dataset)
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",9,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
View(test_dataset)
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",10,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
View(test_dataset)
1168/10
View(date)
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",5,"Pound Sterling")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
View(test_dataset)
View(train_dataset)
View(date)
View(test_dataset)
View(train_dataset)
View(test_dataset)
View(train_dataset)
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
View(test_dataset)
View(train_dataset)
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
?mlp
??mlp
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 2)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- as.data.frame(denormalized(predicted_oneDayhead))
actual <- denormalized(test_dataset[,4])
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 2)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- as.data.frame(denormalized(predicted_oneDayhead))
actual <- denormalized(test_dataset[,4])
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 2)
model_results2 <- neuralnet::compute(exchange_model2, test_dataset[1:3])
predicted_oneDayhead2 <- model_results2$net.result
predict_value2 <- as.data.frame(denormalized(predicted_oneDayhead2))
exchange_model3 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 2)
model_results3 <- neuralnet::compute(exchange_model3, test_dataset[1:3])
predicted_oneDayhead3 <- model_results3$net.result
predict_value3 <- as.data.frame(denormalized(predicted_oneDayhead3))
all_predicted <- c(predict_value1,predict_value2,predict_value3)
all_predicted <- c(predict_value,predict_value2,predict_value3)
all_predicted <-as.data.frame(all_predicted)
View(all_predicted)
View(all_predicted)
names(all_predicted)<- c("First MLP", "Second MLP", "Third MLP")
View(all_predicted)
