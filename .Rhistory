source("requried_functions_N_libraries.R")
source("Data_Processing.R")
url <- "/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv"
predictor_order <- seq(3,10,1)
currency <- c("U.S. Dollar", "Australian Dollar", "Canadian Dollar", "Euro","Pound Sterling", "Singapore Dollar","Swiss Franc")
dataset_list <- list()
for (i in 1:7){
if (i == 1) {
data_frame_3 <- Data_Processing(url,predictor_order[1],currency[1])
data_frame_4 <- Data_Processing(url,predictor_order[2],currency[1])
data_frame_5 <- Data_Processing(url,predictor_order[3],currency[1])
data_frame_6 <- Data_Processing(url,predictor_order[4],currency[1])
data_frame_7 <- Data_Processing(url,predictor_order[5],currency[1])
data_frame_8 <- Data_Processing(url,predictor_order[6],currency[1])
data_frame_9 <- Data_Processing(url,predictor_order[7],currency[1])
data_frame_10 <- Data_Processing(url,predictor_order[8],currency[1])
dataset_list_usd  <- c(data_frame_3,data_frame_4,data_frame_5,data_frame_6,data_frame_7,data_frame_8,data_frame_9,data_frame_10)
dataset_list[[i]] <- dataset_list_usd
}
if (i == 2) {
data_frame_3 <- Data_Processing(url,predictor_order[1],currency[2])
data_frame_4 <- Data_Processing(url,predictor_order[2],currency[2])
data_frame_5 <- Data_Processing(url,predictor_order[3],currency[2])
data_frame_6 <- Data_Processing(url,predictor_order[4],currency[2])
data_frame_7 <- Data_Processing(url,predictor_order[5],currency[2])
data_frame_8 <- Data_Processing(url,predictor_order[6],currency[2])
data_frame_9 <- Data_Processing(url,predictor_order[7],currency[2])
data_frame_10 <- Data_Processing(url,predictor_order[8],currency[2])
dataset_list_aus  <- c(data_frame_3,data_frame_4,data_frame_5,data_frame_6,data_frame_7,data_frame_8,data_frame_9,data_frame_10)
dataset_list[[i]] <- dataset_list_aus
}
if (i == 3) {
data_frame_3 <- Data_Processing(url,predictor_order[1],currency[3])
data_frame_4 <- Data_Processing(url,predictor_order[2],currency[3])
data_frame_5 <- Data_Processing(url,predictor_order[3],currency[3])
data_frame_6 <- Data_Processing(url,predictor_order[4],currency[3])
data_frame_7 <- Data_Processing(url,predictor_order[5],currency[3])
data_frame_8 <- Data_Processing(url,predictor_order[6],currency[3])
data_frame_9 <- Data_Processing(url,predictor_order[7],currency[3])
data_frame_10 <- Data_Processing(url,predictor_order[8],currency[3])
dataset_list_can  <- c(data_frame_3,data_frame_4,data_frame_5,data_frame_6,data_frame_7,data_frame_8,data_frame_9,data_frame_10)
dataset_list[[i]] <- dataset_list_can
}
if (i == 4) {
data_frame_3 <- Data_Processing(url,predictor_order[1],currency[4])
data_frame_4 <- Data_Processing(url,predictor_order[2],currency[4])
data_frame_5 <- Data_Processing(url,predictor_order[3],currency[4])
data_frame_6 <- Data_Processing(url,predictor_order[4],currency[4])
data_frame_7 <- Data_Processing(url,predictor_order[5],currency[4])
data_frame_8 <- Data_Processing(url,predictor_order[6],currency[4])
data_frame_9 <- Data_Processing(url,predictor_order[7],currency[4])
data_frame_10 <- Data_Processing(url,predictor_order[8],currency[4])
dataset_list_euro  <- c(data_frame_3,data_frame_4,data_frame_5,data_frame_6,data_frame_7,data_frame_8,data_frame_9,data_frame_10)
dataset_list[[i]] <- dataset_list_euro
}
if (i == 5) {
data_frame_3 <- Data_Processing(url,predictor_order[1],currency[5])
data_frame_4 <- Data_Processing(url,predictor_order[2],currency[5])
data_frame_5 <- Data_Processing(url,predictor_order[3],currency[5])
data_frame_6 <- Data_Processing(url,predictor_order[4],currency[5])
data_frame_7 <- Data_Processing(url,predictor_order[5],currency[5])
data_frame_8 <- Data_Processing(url,predictor_order[6],currency[5])
data_frame_9 <- Data_Processing(url,predictor_order[7],currency[5])
data_frame_10 <- Data_Processing(url,predictor_order[8],currency[5])
dataset_list_pou  <- c(data_frame_3,data_frame_4,data_frame_5,data_frame_6,data_frame_7,data_frame_8,data_frame_9,data_frame_10)
dataset_list[[i]] <- dataset_list_pou
}
if (i == 6) {
data_frame_3 <- Data_Processing(url,predictor_order[1],currency[6])
data_frame_4 <- Data_Processing(url,predictor_order[2],currency[6])
data_frame_5 <- Data_Processing(url,predictor_order[3],currency[6])
data_frame_6 <- Data_Processing(url,predictor_order[4],currency[6])
data_frame_7 <- Data_Processing(url,predictor_order[5],currency[6])
data_frame_8 <- Data_Processing(url,predictor_order[6],currency[6])
data_frame_9 <- Data_Processing(url,predictor_order[7],currency[6])
data_frame_10 <- Data_Processing(url,predictor_order[8],currency[6])
dataset_list_sin  <- c(data_frame_3,data_frame_4,data_frame_5,data_frame_6,data_frame_7,data_frame_8,data_frame_9,data_frame_10)
dataset_list[[i]] <- dataset_list_sin
}
if (i == 7) {
data_frame_3 <- Data_Processing(url,predictor_order[1],currency[7])
data_frame_4 <- Data_Processing(url,predictor_order[2],currency[7])
data_frame_5 <- Data_Processing(url,predictor_order[3],currency[7])
data_frame_6 <- Data_Processing(url,predictor_order[4],currency[7])
data_frame_7 <- Data_Processing(url,predictor_order[5],currency[7])
data_frame_8 <- Data_Processing(url,predictor_order[6],currency[7])
data_frame_9 <- Data_Processing(url,predictor_order[7],currency[7])
data_frame_10 <- Data_Processing(url,predictor_order[8],currency[7])
dataset_list_swi  <- c(data_frame_3,data_frame_4,data_frame_5,data_frame_6,data_frame_7,data_frame_8,data_frame_9,data_frame_10)
dataset_list[[i]] <- dataset_list_swi
}
}
str(dataset_list)
a <-dataset_list[[1]][1][1]
head(a)
a <-dataset_list[[1]][1][1][1]
head(a)
str(a)
a <-dataset_list[[1]][[1]][[1]][1]
str(a)
a <-dataset_list[[1]][[1]][[1]]
str(a)
head(a)
a <-dataset_list[[1]][[1]][1]
str(a)
a <-dataset_list[[1]][[1]][[1]]
str(a)
a <-dataset_list[[1]][1][1]
str(a)
source("data_spliting.R")
source("data_spliting.R")
data_set <- data_spliting()
a <-dataset_list[[1]][2][1]
a <-data_set[[1]][2][1]
a <-data_set[[1]][1][2]
str(a)
str(data_set)
source("data_spliting.R")
data_set <- data_spliting()                             # Usage of Data_set
source("data_spliting.R")
data_set <- data_spliting()                             # Usage of Data_set
str(data_set)
str(data_set[[1]])
str(data_set[[2]])
str(data_set[[1]][1])
str(data_set[[1]][2])
str(data_set[[1]][3])
str(data_set[[1]][4])
predictor_order <- readline(prompt="Please, enter your ANSWER: ")
predictor_order <- readline(prompt="Please, enter your ANSWER: ")
str(predictor_order)
as.integer(predictor_order)
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
# Data Source
url <- "/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv"
# Select Predictor Order (Range: 3 <-> 10 )
predictor_order <- seq(3,10,1)
## Currency : 1. "U.S. Dollar" / 2.  "Australian Dollar"/ 3. "Canadian Dollar"/ 4. "Euro"
##            5. "Pound Sterling"/ 6, "Singapore Dollar"/7. "Swiss Franc"
currency <- c("U.S. Dollar", "Australian Dollar", "Canadian Dollar", "Euro","Pound Sterling", "Singapore Dollar","Swiss Franc")
# To hold the dataframe for each prediction_order
dataset_list <- list()
dataset_list <- list()
source("data_spliting.R")
data_set <- data_spliting()
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
url <- "/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv"
predictor_order <- seq(3,10,1)
currency <- c("U.S. Dollar", "Australian Dollar", "Canadian Dollar", "Euro","Pound Sterling", "Singapore Dollar","Swiss Franc")
dataset_list <- list()
dataset_list_usd <- list()
for(i in 1:7){
if (i == 1) {
for(j in 1:8){
data_frame <- Data_Processing(url,predictor_order[j],currency[1])
data_frame_usd[[j]] <- data_frame
}
dataset_list[[i]]<- data_frame_usd
}
}
data_frame_usd <- list()
for(i in 1:7){
if (i == 1) {
for(j in 1:8){
data_frame <- Data_Processing(url,predictor_order[j],currency[1])
data_frame_usd[[j]] <- data_frame
}
dataset_list[[i]]<- data_frame_usd
}
}
source("data_spliting.R")
data_set <- data_spliting()                             # Usage of Data_set
a <- data_set[[1]][[2]][1]
a <- data_set[[1]][[2]][1:4]
b <- data_set[[1]][[3]][1:4]
700+466
701+467
rm(a)
rm(b)
a <- data_set[[1]][[1]][1:4]
train_dataset <- a[1]
train_dataset <- a[[1]]
test_dataset <- a[[2]]
require("rnn")
require("RSNNS")
input_list <- list()
for (i in 1:predictor_order){
input_day<- as.matrix(train_dataset[,i])
input_list[[i]]<-input_day
}
predictor_order <- 3
learning_rate <- 0.1
for (i in 1:predictor_order){
input_day<- as.matrix(train_dataset[,i])
input_list[[i]]<-input_day
}
output_matrix <- as.matrix(train_dataset[,predictor_order+1])
input_try <- array(input_list , dim=c(dim(input_day),predictor_order) )
output_try <- array(output_matrix, dim=c(dim(output_matrix),1))
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 2,
numepochs = 10
)
b <- list()
b[[1]]<-1
b[[2]]<-2
b[[3]]<-3
b
c <- c(1,2,2)
c <- c(1,2,3)
c
as.vector(b)
as.vector(b[[1]])
as.vector(b[[1]][1])
as.vector(b[[1]][[1]])
input_list <- array()
input_array <- list()
for (i in 1:predictor_order){
input_day<- as.matrix(train_dataset[,i])
input_array[i]<-input_day
}
input_array <- list()
for (i in 1:predictor_order){
input_day<- as.matrix(train_dataset[,i])
input_array <- c(input_array,input_day)
}
train_dataset <- a[[1]]
test_dataset <- a[[2]]
predictor_order <- 3
learning_rate <- 0.1
input_day1 <- as.matrix(train_dataset[,1])
input_day2 <- as.matrix(train_dataset[,2])
input_day3 <- as.matrix(train_dataset[,3])
try <-  c(input_day1,input_day2,input_day3)
str(try)
try_2 <- as.numeric(input_array)
input_array_1 <- numeric()
for (i in 1:predictor_order){
input_day<- as.matrix(train_dataset[,i])
input_array <- c(input_array,input_day)
}
input_array_1 <- list()
for (i in 1:predictor_order){
input_day<- as.matrix(train_dataset[,i])
input_array <- c(input_array,input_day)
}
input_array_1 <- list()
for (i in 1:predictor_order){
input_day <- as.matrix(train_dataset[,i])
input_array_1 <- c(input_array_1,input_day)
}
rm(input_array)
rm(input_list)
input_array_1 <- as.numeric(input_array_1)
output_matrix <- as.matrix(train_dataset[,predictor_order+1])
input_try <- array( input_array_1, dim=c(dim(input_day1),predictor_order) )
output_try <- array(output_matrix, dim=c(dim(output_matrix),1))
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 2,
numepochs = 10
)
test_input_array_1 <- list()
for (i in 1:predictor_order){
input_day <- as.matrix(train_dataset[,i])
test_input_array_1 <- c(test_input_array_1,input_day)
}
test_input_array_1 <- as.numeric(test_input_array_1)
test_input_try <- array( test_input_array_1, dim=c(dim(test_input_day3),predictor_order) )
test_input_try <- array( test_input_array_1, dim=c(dim(input_day),predictor_order) )
test_result <- predictr(model, test_input_try )
predict_value <- denormalized(test_result)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist( actual-predict_value )
usd_non_normalize <- a[[4]]
test_input_try <- array( test_input_array_1, dim=c(dim(input_day),predictor_order) )
test_result <- predictr(model, test_input_try )
predict_value <- denormalized(test_result)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
str(predict_value)
str(actual)
test_input_array_1 <- list()
for (i in 1:predictor_order){
input_day <- as.matrix(test_dataset[,i])
test_input_array_1 <- c(test_input_array_1,input_day)
}
test_input_array_1 <- as.numeric(test_input_array_1)
test_input_try <- array( test_input_array_1, dim=c(dim(input_day),predictor_order) )
test_result <- predictr(model, test_input_try )
predict_value <- denormalized(test_result)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist( actual-predict_value )
rmse(error)
mae(error)
predictor_order+1/2
ceiling((predictor_order+1)/2)
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = ceiling((predictor_order+1)/2),
numepochs = 1000
)
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = ceiling((predictor_order+1)/2),
numepochs = 10
)
rm(a)
rm(b)
rm(c)
rm(i)
rm(input_array_1)
rm(try)
rm(try_2
)
rm(input_day)
rm(input_try)
rm(input_day1)
rm(input_day2)
rm(input_day3)
rm(output_matrix)
rm(output_try)
rm(test_input_array_1)
rm(test_input_try)
require("neuralnet")
hidden_neurons = ceiling((predictor_order + 1)/2)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay, learningrate = learning_rate,
data = train_dataset, hidden = hidden_neurons)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:predictor_order])
predicted_oneDayhead <- model_results$net.result
predict_value <- denormalized(predicted_oneDayhead)
actual <- denormalized(test_dataset[,predictor_order+1])
error <- actual - predict_value
final_result <- c(predict_value,error)
final_result <- list(c(predict_value,error))
final_result <- list(predict_value,error)
train_input <- as.matrix(train_dataset[,1:predictor_order])
train_output <- as.matrix(train_dataset[,predictor_order+1])
test_input <- as.matrix(test_dataset[,1:predictor_order])
test_actual <- as.vector(test_dataset[,predictor_order+1])
neurons <- predictor_order+1/2;
data<-rbftrain(train_input,neurons,train_output, alfa= 0.1, it= 1000, sigma=NaN,visual = F)
require("neural")
data<-rbftrain(train_input,neurons,train_output, alfa= 0.1, it= 1000, sigma=NaN,visual = F)
result <- rbf(test_input,data$weight,data$dist,data$neurons,data$sigma)
data<-rbftrain(train_input,neurons,train_output, alfa= 0.1, it= 1000, sigma=NaN,visual = F)
neurons <- ceiling((predictor_order+1)/2);
data<-rbftrain(train_input,neurons,train_output, alfa= 0.1, it= 1000, sigma=NaN,visual = F)
result <- rbf(test_input,data$weight,data$dist,data$neurons,data$sigma)
result <- as.vector(result)
result <- denormalized(result)
test_actual <- denormalized(test_actual)
error <- test_actual - result
rmse(error)
mae(error)
final_result <- list(predict_value,error)
?rm
rm(num = ls())
rm(numeric() = ls())
rm(numeric = ls())
rm(model)
rm(data)
rm(actual)
rm(exchange_model)
rm(final_result)
rm(model_results)
rn(neurons)
rm(neurons)
rm(predicted_oneDayhead)
rm(predict_value
)
rm(test_input)
rm(test_result)
rm(train_input)
rm(train_output)
rm(error)
rm(hidden_neurons)
rm(learning_rate)
rm(result)
rm(test_actual)
rm(predictor_order)
