library("neural")
library("rnn")
library("RSNNS")
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## HETROGENEOUS  MODEL
## Train the network using neuralnet (First network:  MLP)
# Training
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay, learningrate = 0.1,
data = train_dataset, hidden = 2)
# Testing and Error Result
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- denormalized(predicted_oneDayhead)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
input_day1 <- as.matrix(train_dataset[,1])
input_day2 <- as.matrix(train_dataset[,2])
input_day3 <- as.matrix(train_dataset[,3])
output_matrix <- as.matrix(train_dataset[,4])
input_try <- array( c(input_day1,input_day2,input_day3) , dim=c(dim(input_day1),3) )
output_try <- array(output_matrix, dim=c(dim(output_matrix),1))
inital_weight <- sample(1:length(input_day1),length(input_day1), replace = F)
set.seed(1)
inital_weight <- normalizeData(inital_weight, type = "0_1")
exchange_model2 <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 2,
numepochs = 200
)
# Testing and Error Result
test_input_day1 <- as.matrix(test_dataset[,1])
test_input_day2 <- as.matrix(test_dataset[,2])
test_input_day3 <- as.matrix(test_dataset[,3])
test_input_try <- array( c(test_input_day1,test_input_day2,test_input_day3), dim=c(dim(test_input_day3),3) )
test_result <- predictr(exchange_model2, test_input_try )
predict_value2 <- denormalized(test_result)
error2 <- actual - predict_value2
hist( actual-predict_value2 )
train_input <- as.matrix(train_dataset[,1:3])
train_output <- as.matrix(train_dataset[,4])
test_input <- as.matrix(test_dataset[,1:3])
data<-rbftrain(train_input,neurons=2,train_output, alfa= 0.1, it= 1000, sigma=NaN,visual = F)
## Testing and Error Result
result <- rbf(test_input,data$weight,data$dist,data$neurons,data$sigma)
result <- as.vector(result)
result <- rbf(test_input,data$weight,data$dist,data$neurons,data$sigma)
str(test_input)
library("neural")
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
test_input_day1 <- as.matrix(test_dataset[,1])
test_input_day2 <- as.matrix(test_dataset[,2])
test_input_day3 <- as.matrix(test_dataset[,3])
test_input_try <- array( c(test_input_day1,test_input_day2,test_input_day3), dim=c(dim(test_input_day3),3) )
test_result <- predictr(exchange_model2, test_input_try )
train_input <- as.matrix(train_dataset[,1:3])
train_output <- as.matrix(train_dataset[,4])
test_input <- as.matrix(test_dataset[,1:3])
data<-rbftrain(train_input,neurons=2,train_output, alfa= 0.1, it= 1000, sigma=NaN,visual = F)
result <- rbf(test_input,data$weight,data$dist,data$neurons,data$sigma)
library(neural)
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
train_input <- as.matrix(train_dataset[,1:3])
train_output <- as.matrix(train_dataset[,4])
test_input <- as.matrix(test_dataset[,1:3])
test_actual <- as.vector(test_dataset[,4])
neurons <- 2;
data<-rbftrain(train_input,neurons,train_output, alfa= 0.1, it= 1000, sigma=NaN,visual = F)
result <- rbf(test_input,data$weight,data$dist,data$neurons,data$sigma)
