## SECOND MLP
set.seed(2)
weight_size =length(train_dataset[,1])
weight <- sample(1:1000,size = weight_size,replace = F)
weight = normalizeData(weight, type = "0_1")
## Train the network using neuralnet (First MLP)
second <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight)
## Second Performance ERROR
mae(second[[2]])
rmse(second[[2]])
## THIRD MLP
set.seed(3)
weight_size =length(train_dataset[,1])
weight <- sample(1:1000,size = weight_size,replace = F)
weight = normalizeData(weight, type = "0_1")
## Train the network using neuralnet (First MLP)
third <-  first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight)
## Third Performance ERROR
mae(third[[2]])
rmse(third[[2]])
## Predicted Value from all Three Network
all_predicted <- cbind(first[[1]],second[[1]],third[[1]])
all_predicted <-as.data.frame(all_predicted)
names(all_predicted)<- c("First MLP", "Second MLP", "Third MLP")
actual <- denormalized(test_dataset[,predictor_order+1])
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
error_mean <- actual - mean_value
error_all_after_fusion <- as.data.frame(cbind(error_min,error_max,error_mean))
names(error_all_after_fusion) <- c("MIN","MAX","MEAN")
rmse(error_all_after_fusion$MIN)
rmse(error_all_after_fusion$MAX)
rmse(error_all_after_fusion$MEAN)
predictor_order <- 4
data_pre_ord_4 <- data_set[[1]][[4]]
data_pre_ord_4 <- data_set[[1]][[2]]
train_dataset <- data_pre_ord_4[[1]]
test_dataset <- data_pre_ord_4[[2]]
usd_non_normalize <- data_pre_ord_4[[4]]
set.seed(1)
weight_size =length(train_dataset[,1])
weight1 <- sample(1:1000,size = weight_size,replace = F)
weight1 = normalizeData(weight1, type = "0_1")
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight1)
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight1)
weight2 <- sample(1:1000,size = weight_size,replace = F)
weight2 = normalizeData(weight2, type = "0_1")
second <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight2)
third <-  first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight3)
source("MLP.R")
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate)
ceiling((predictor_order + 1)/2
)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay, learningrate = learning_rate,
data = train_dataset, hidden = hidden_neurons)
hidden_neurons = ceiling((predictor_order + 1)/2)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay, learningrate = learning_rate,
data = train_dataset, hidden = hidden_neurons)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:predictor_order])
model_results <- neuralnet::compute(exchange_model, test_dataset[,1:predictor_order])
model_results <- neuralnet::compute(exchange_model, test_dataset[,1:predictor_order])
View(train_dataset)
str(data_set)
source("MLP.R")
source("MLP.R")
source("MLP.R")
require(RSNNS)
set.seed(1)
weight_size =length(train_dataset[,1])
weight1 <- sample(1:1000,size = weight_size,replace = F)
weight1 = normalizeData(weight1, type = "0_1")
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight1)
mae(first[[2]])
rmse(first[[2]])
set.seed(2)
weight_size =length(train_dataset[,1])
weight2 <- sample(1:1000,size = weight_size,replace = F)
weight2 = normalizeData(weight2, type = "0_1")
## Train the network using neuralnet (First MLP)
second <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight2)
mae(second[[2]])
rmse(second[[2]])
set.seed(3)
weight_size =length(train_dataset[,1])
weight3 <- sample(1:1000,size = weight_size,replace = F)
weight3 = normalizeData(weight3, type = "0_1")
third <-  first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight3)
mae(third[[2]])
rmse(third[[2]])
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
error_mean <- actual - mean_value
error_all_after_fusion <- as.data.frame(cbind(error_min,error_max,error_mean))
names(error_all_after_fusion) <- c("MIN","MAX","MEAN")
rmse(error_all_after_fusion$MIN)
rmse(error_all_after_fusion$MAX)
rmse(error_all_after_fusion$MEAN)
rmse(error_all_after_fusion$MIN)
mae(error_all_after_fusion$MIN)
rmse(error_all_after_fusion$MAX)
mae(error_all_after_fusion$MAX)
rmse(error_all_after_fusion$MEAN)
mae(error_all_after_fusion$MEAN)
rmse(error_all_after_fusion$MIN)
mae(error_all_after_fusion$MIN)
rmse(error_all_after_fusion$MAX)
mae(error_all_after_fusion$MAX)
rmse(error_all_after_fusion$MEAN)
mae(error_all_after_fusion$MEAN)
rmse_min <- rmse(error_all_after_fusion$MIN)
mae_min <- mae(error_all_after_fusion$MIN)
rmse_max <- rmse(error_all_after_fusion$MAX)
mae_max <- mae(error_all_after_fusion$MAX)
rmse_mean <- rmse(error_all_after_fusion$MEAN)
mae_mean<- mae(error_all_after_fusion$MEAN)
rmse_rate <- min(rmse_min,rmse_max,rmse_mean)
rmse
rmse_rate
mae_rate <- min(mae_max,mae_mean,mae_min)
mae_rate
if(rmse_rate == rmse_max && mae_rate == mae_max){
final_result = list(max_value,error_max)
}
if(rmse_rate == rmse_min && mae_rate == mae_min){
final_result = list(min_value,error_min)
}
if(rmse_rate == rmse_mean && mae_rate == mae_mean){
final_result = list(mean_value,error_mean)
}
head(final_result)
head(final_result[[1]])
head(final_result[[2]])
rm(hidden_neurons,learning_rate,mae_max,mae_min,mae_mean,mae_rate,max_value,min_value,mean_value)
rm(error_max,error_min,error_mean)
rm(rmse_max,rmse_min,rmse_mean,rmse_rate)
rm(weight,weight1)
rm(weight2,weight3)
rm(all_predicted)
rm(error_all_after_fusion)
rm(first,second,third)
rm(final_result)
rm(weight_size)
rn(exchange_model)
rm(exchange_model)
data_usd_pre_ord_5 <- data_set[[1]][[3]]                #****Lanuage Type **** #   #**** Predictor_ordr****#
rm(data_pre_ord_4)
data_usd_pre_ord_4 <- data_set[[1]][[2]]                #   1. USD    5. PON   #   #  1. PO_3   5. PO_7
usd_non_normalize <- data_usd_pre_ord_4[[4]]
usd_non_normalize_4 <- data_usd_pre_ord_4[[4]]
date_4 <- data_usd_pre_ord_4[[3]]
length(train_dataset)
length(train_dataset[,1])
length(date_4)
length(date_4[1])
length(date_4[m1])
length(date_4[,1])
View(date_4)
rm(actual)
source("HOMO.R")
source("HOMO.R")
str(HOMO)
source("HOMO.R")
result_4 <-  HOMO(train_dataset_4,test_dataset_4,usd_non_normalize_4,4,0.1)
train_dataset_4 <- data_usd_pre_ord_4[[1]]
test_dataset_4 <- data_usd_pre_ord_4[[2]]
usd_non_normalize_4 <- data_usd_pre_ord_4[[4]]
test_date_4 <- data_usd_pre_ord_4[[3]]
source("HOMO.R")
result_4 <-  HOMO(train_dataset_4,test_dataset_4,usd_non_normalize_4,4,0.1)
str(result_4)
View(usd_non_normalize_4)
View(usd_non_normalize)
rm(usd_non_normalize)
actual_4 <- test_dataset_4[,5]
actual_4 <- denormalized(test_dataset_4[,5])
source("requried_functions_N_libraries.R")
result_4 <-  HOMO(train_dataset_4,test_dataset_4,usd_non_normalize_4,4,0.1)
source("HOMO.R")
result_4 <-  HOMO(train_dataset_4,test_dataset_4,usd_non_normalize_4,4,0.1)
actual_4 <- denormalized(test_dataset_4[,5],usd_non_normalize_4)
source("HOMO.R")
result_4 <-  HOMO(train_dataset_4,test_dataset_4,usd_non_normalize_4,4,0.1)
hist(result_4[[2]])
result_towrite_4<- as.data.frame(test_date_4,result_4[[1]],result_4[[2]])
test_date_4 <- as.integer(data_usd_pre_ord_4[[3]])
test_date_4 <- as.integer(test_date_4)
head(test_date_4)
str(test_date_4)
test_date_4 <- as.vector(test_date_4)
test_date_4 <- as.Date(test_date_4)
test_date_4 <- data_usd_pre_ord_4[[3]]
View(test_date_4)
str(test_date_4)
test_date_4 <- as.vector(test_date_4)
result_towrite_4<- as.data.frame(test_date_4,result_4[[1]],result_4[[2]])
test_date_4 <- as.character(test_date_4)
result_towrite_4<- as.data.frame(test_date_4,result_4[[1]],result_4[[2]])
View(result_towrite_4)
View(result_towrite_4)
test_date_4 <- data_usd_pre_ord_4[[3]]
result_towrite_4<- c(test_date_4,result_4[[1]],result_4[[2]])
result_towrite_4<- list(test_date_4,result_4[[1]],result_4[[2]])
result_towrite_4 <- as.data.frame(result_towrite_4)
View(result_towrite_4)
names(result_towrite_4)<- c("Date","Predicted_Value","Error")
View(result_towrite_4)
View(result_towrite_4)
actual_4 <- denormalized(test_dataset_4[,5],usd_non_normalize_4)
result_towrite_4<- list(test_date_4,actual_4, result_4[[1]],result_4[[2]])
result_towrite_4 <- as.data.frame(result_towrite_4)
names(result_towrite_4)<- c("Date","Actual_Value","Predicted_Value","Error")
View(result_towrite_4)
View(result_towrite_4)
library(xlsx)
write.xlsx(result_towrite_4, "reslut_USD_PO4.xlsx")
predictor_order <- seq(3,10,1)
train_dataset <- data_set[[1]][[1]][[1]]
View(train_dataset)
source("HOMO.R")                                        #   3. CAN    7, SWI   #   #  3. PO_5   7. PO_9
train_dataset <- list()                                 #   4. EURO            #   #  4. PO_6   8. PO_10
test_dataset <- list()
usd_non_normalize <- list()
actual_data <- list()
result_usd <- list()
predictor_order <- seq(3,10,1)
test_date <- list()
#USD_ONLY MODEL
for (i in 1:8) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- denormalized(test_dataset[[i]][,predictor_order+1],usd_non_normalize[[i]])
}
for (i in 1:8) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
#actual_data[[i]] <- denormalized(test_dataset[[i]][,predictor_order+1],usd_non_normalize[[i]])
}
for (i in 1:8) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
#actual_data[[i]] <- denormalized(test_dataset[[i]][,predictor_order+1],usd_non_normalize[[i]])
}
rm(test_date)
source("HOMO.R")                                        #   3. CAN    7, SWI   #   #  3. PO_5   7. PO_9
train_dataset <- list()                                 #   4. EURO            #   #  4. PO_6   8. PO_10
test_dataset <- list()
usd_non_normalize <- list()
actual_data <- list()
result_usd <- list()
predictor_order <- seq(3,10,1)
test_date <- list()
#USD_ONLY MODEL
for (i in 1:8) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
#actual_data[[i]] <- denormalized(test_dataset[[i]][,predictor_order+1],usd_non_normalize[[i]])
}
source("HOMO.R")                                        #   3. CAN    7, SWI   #   #  3. PO_5   7. PO_9
train_dataset <- list()                                 #   4. EURO            #   #  4. PO_6   8. PO_10
test_dataset <- list()
usd_non_normalize <- list()
actual_data <- list()
result_usd <- list()
predictor_order <- seq(3,10,1)
test_date <- list()
#USD_ONLY MODEL
for (i in 1:8) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- denormalized(test_dataset[[i]][,predictor_order+1],usd_non_normalize[[i]])
}
for (i in 1:8) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,predictor_order+1],usd_non_normalize[[i]]
}
for (i in 1:8) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,predictor_order+1]
}
test_dataset[[i]][,predictor_order+1]
test_dataset[[i]][predictor_order+1]
actual_col <- predictor_order+1
for (i in 1:8) {
actual_col <- predictor_order+1
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,actual_col]
}
test_dataset[[i]]
a <-test_dataset[[i]]
a <-test_dataset[[1]]
str(a)
a[,4]
a <-test_dataset[[1]][,4]
actual_data[[i]] <- test_dataset[[i]][,actual_col]
for (i in 1:8) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,i+3]
}
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,i+3]
}
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,i+3]
result_usd[[i]] <-  HOMO(train_dataset[[i]],test_dataset[[i]],usd_non_normalize[[i]],i+2,0.1)
}
rm(result_4)
rm(data_usd_pre_ord_4)
rm(data_usd_pre_ord_5)
result_towrite <- data.frame()
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,i+3]
result_usd[[i]] <-  HOMO(train_dataset[[i]],test_dataset[[i]],usd_non_normalize[[i]],i+2,0.1)
result_towrite <-rbind( result_towrite, c(i+2,(predictor_order[i]+1)/2, result_usd[[i]][,4], result_usd[[i]][,5],result_usd[[i]][,3]))
}
result_usd[[1]][,4]
result_usd[[1]][[1[,4]
{{}}
for (j in 1:8) {
result_towrite <-rbind( result_towrite, c(i+2,(predictor_order[i]+1)/2, result_usd[[i]][[j]][,4], result_usd[[i]][[j]][,5],result_usd[[i]][[j]][,3]))
}
result_usd[[1]][[1]][,4]
result_usd[[1]][1][,4]
str(result_usd)
result_usd[1]
result_usd[1][[3]]
result_usd[1][[3]
]
result_usd[1][3]
result_usd[[1]][3]
result_towrite
result_towrite <-rbind( result_towrite, c(i+2,(predictor_order[i]+1)/2, result_usd[[i]][4], result_usd[[i]][5],result_usd[[i]][3]))
View(result_towrite)
View(result_towrite)
source("HOMO.R")                                        #   3. CAN    7, SWI   #   #  3. PO_5   7. PO_9
train_dataset <- list()                                 #   4. EURO            #   #  4. PO_6   8. PO_10
test_dataset <- list()
usd_non_normalize <- list()
actual_data <- list()
predictor_order <- seq(3,10,1)
test_date <- list()
result_usd <- list()
result_towrite <- data.frame()
#USD_ONLY MODEL
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,i+3]
result_usd[[i]] <-  HOMO(train_dataset[[i]],test_dataset[[i]],usd_non_normalize[[i]],i+2,0.1)
result_towrite <-rbind( result_towrite, c(i+2,(predictor_order[i]+1)/2, result_usd[[i]][4], result_usd[[i]][5],result_usd[[i]][3]))
}
rm(result_towrite_4)
rm(test_dataset_4)
rm(train_dataset_4)
rm(test_data_4)
rm(test_date_4)
rm(usd_non_normalize_4)
rm(date_4)
names(result_towrite) <- c("Predictor Order","Neurons","RMSE","MAE","OPIMIZED FUSION FUNC")
View(result_towrite)
View(result_towrite)
source("HOMO.R")                                        #   3. CAN    7, SWI   #   #  3. PO_5   7. PO_9
train_dataset <- list()                                 #   4. EURO            #   #  4. PO_6   8. PO_10
test_dataset <- list()
usd_non_normalize <- list()
actual_data <- list()
predictor_order <- seq(3,10,1)
test_date <- list()
result_usd <- list()
result_towrite <- data.frame()
#USD_ONLY MODEL
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,i+3]
result_usd[[i]] <-  HOMO(train_dataset[[i]],test_dataset[[i]],usd_non_normalize[[i]],i+2,0.1)
result_towrite <-rbind( result_towrite, c(i+2,ceiling(predictor_order[i]+1)/2, result_usd[[i]][4], result_usd[[i]][5],result_usd[[i]][3]))
}
View(result_towrite)
View(result_towrite)
source("HOMO.R")                                        #   3. CAN    7, SWI   #   #  3. PO_5   7. PO_9
train_dataset <- list()                                 #   4. EURO            #   #  4. PO_6   8. PO_10
test_dataset <- list()
usd_non_normalize <- list()
actual_data <- list()
predictor_order <- seq(3,10,1)
test_date <- list()
result_usd <- list()
result_towrite <- data.frame()
#USD_ONLY MODEL
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,i+3]
result_usd[[i]] <-  HOMO(train_dataset[[i]],test_dataset[[i]],usd_non_normalize[[i]],i+2,0.1)
result_towrite <-rbind( result_towrite, c(i+2,ceiling((predictor_order[i]+1)/2), result_usd[[i]][4], result_usd[[i]][5],result_usd[[i]][3]))
}
names(result_towrite) <- c("Predictor Order","Neurons","RMSE","MAE","OPIMIZED FUSION FUNC")
View(result_towrite)
View(result_towrite)
??neuralnet
library(xlsx)
write.xlsx(result_towrite_4, "old_MLP_result.xlsx")
write.xlsx(result_towrite, "old_MLP_result.xlsx")
source("MLP1.R")
data_try_4 <-data_set[[1]][[2]]
str(data_try_4)
train_dataset[[i]] <- data_try_4[[1]][[1]]
train_dataset <- data_try_4[[1]][[1]]
train_dataset <- data_try_4[[1]][1]
train_dataset <- data_try_4[[1]]
test_dataset[[i]] <- data_try_4[[1]]
train_dataset <- data_try_4[[1]]
test_dataset <- data_try_4[[2]]
test_date <- data_try_4[[3]]
usd_non_normalize<- data_try_4[[4]]
actual_data<- test_dataset[,5]
## FIRST MLP
set.seed(1)
weight_size =length(train_dataset[,1])
weight1 <- sample(1:1000,size = weight_size,replace = F)
weight1 = normalizeData(weight1, type = "0_1")
## Train the network using neuralnet (First MLP)
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight1)
first <- MLP1( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight1)
first <- MLP1( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight1)
source("MLP1.R")
predictor_order <- 4
first <- MLP1( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight1)
neurons <- 3
first <- MLP1( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weight1)
source("MLP1.R")
first <- MLP1( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weight1)
source("MLP1.R")
first <- MLP1( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weight1)
data_try_4 <-data_set[[1]][[2]]
train_dataset <- data_try_4[[1]]
test_dataset <- data_try_4[[2]]
test_date <- data_try_4[[3]]
usd_non_normalize<- data_try_4[[4]]
actual_data<- test_dataset[,5]
predictor_order <- 4
neurons <- 3
train_input <- as.matrix(train_dataset[,1:predictor_order])
train_output <- as.matrix(train_dataset[,predictor_order+1])
test_input <- as.matrix(test_dataset[,1:predictor_order])
test_actual <- as.vector(test_dataset[,predictor_order+1])
data<-mlptrain(train_input,neurons,train_output, weight = weights ,alfa= learning_rate , it= 1000, sigma=NaN,visual = F)
result <- mlp(test_input,data$weight,data$dist,data$neurons,data$sigma)
data<-mlptrain(train_input,neurons,train_output ,alfa= learning_rate , it= 1000,visual = F)
result <- mlp(test_input,data$weight,data$dist,data$neurons,data$sigma)
result <- as.vector(result)
result <- denormalized(result,usd_non_normalize)
test_actual <- denormalized(test_actual,usd_non_normalize)
error <- test_actual - result
rmse(error)
train_output <- as.matrix(train_dataset[,predictor_order+1])
test_input <- as.matrix(test_dataset[,1:predictor_order])
test_actual <- as.vector(test_dataset[,predictor_order+1])
data<-mlptrain(train_input,neurons,train_output ,alfa= learning_rate , it= 1000,visual = F)
result <- mlp(test_input,data$weight,data$dist,data$neurons,data$sigma)
result <- as.vector(result)
result <- denormalized(result,usd_non_normalize)
test_actual <- denormalized(test_actual,usd_non_normalize)
error <- test_actual - result
rmse(error)
data$weight
