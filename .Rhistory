View(result_HOMO_USD)
try <- as.tbl(result_HOMO_USD)
str(try)
??filter
?filter
a <- filter(try, RMSE == min(try$RMSE))
a
result <- as.tbl(result_HOMO_USD)
result <- as.tbl(result_HOMO_USD)
best <- filter(try, RMSE == min(try$RMSE))
View(best)
View(best)
result <- as.tbl(result_HOMO_USD)
best <- filter(try, RMSE == min(try$RMSE))
predictor_order <- best$Predictor_Order
neurons <- best$Neurons
activation_func <- best$Activation_Function
learning_rate <- best$Learning_Rate
Result_USD_HOMO_LIST_70 <- list()
count <- 1
count2 <- 1
### Changes in Neurons and Learning Functins and Learning Rate
for (i in 1:length(predictor_order)) {
result_HOMO_USD <- data.frame("Predictor_Order"=numeric(),"Neurons"=numeric(),"RMSE"=numeric(),
"MAE"=numeric(),"Activation_Function"=character(),"Learning_Rate"=numeric(),
stringsAsFactors=FALSE)
usd_non_normalize_PO3 <- data.frame()
test_date_PO3 <- data.frame()
actual_usd_PO3 <- data.frame()
result_usd_PO3 <- list()
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[4]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[6]]
actual_usd[[i]] <- test_dataset[[i]][,i+3]
if(predictor_order[i]==3){ neurons<-seq(2,20,1)}
if(predictor_order[i]==4){ neurons<-seq(3,20,1)}
if(predictor_order[i]==5){ neurons<-seq(3,20,1)}
if(predictor_order[i]==6){ neurons<-seq(4,20,1)}
if(predictor_order[i]==7){ neurons<-seq(4,20,1)}
if(predictor_order[i]==8){ neurons<-seq(5,20,1)}
if(predictor_order[i]==9){ neurons<-seq(5,20,1)}
if(predictor_order[i]==10){ neurons<-seq(6,20,1)}
for (l in 1:length(learning_rate) ){
for (k in 1:length(activation_func)) {
for (j in 1:length(neurons)) {
train_dataset_PO3 <- train_dataset[[i]]
test_dataset_PO3 <- test_dataset[[i]]
test_date_PO3 <- test_date[[i]]
usd_non_normalize_PO3 <-   usd_non_normalize[[i]]
actual_usd_PO3 <-  actual_usd[[i]]
result_usd_PO3[[j]] <-  HOMO(train_dataset_PO3,test_dataset_PO3, usd_non_normalize_PO3,
neurons = neurons[j], predictor_order[i],
activation_func[k],learning_rate[l])
result_HOMO_USD[count2,] <-c(predictor_order[i],neurons[j],
result_usd_PO3[[j]][4],result_usd_PO3[[j]][5],
activation_func[k],learning_rate[l])
Result_USD_HOMO_LIST_70[[count]] <- list(predictor_order[i],neurons[j],learning_rate[l],
activation_func[k], result_usd_PO3[[j]])
count <- count +1
count2 <- count2 +1
}
}
}
}
result <- as.tbl(result_HOMO_USD)
best <- filter(try, RMSE == min(try$RMSE))
predictor_order <- best$Predictor_Order
neurons <- best$Neurons
activation_func <- best$Activation_Function
learning_rate <- best$Learning_Rate
Result_USD_HOMO_LIST <- list()
count <- 1
count2 <- 1
### Changes in Neurons and Learning Functins and Learning Rate
for (i in 1:length(predictor_order)) {
result_HOMO_USD <- data.frame("Predictor_Order"=numeric(),"Neurons"=numeric(),"RMSE"=numeric(),
"MAE"=numeric(),"Activation_Function"=character(),"Learning_Rate"=numeric(),
stringsAsFactors=FALSE)
usd_non_normalize_PO3 <- data.frame()
test_date_PO3 <- data.frame()
actual_usd_PO3 <- data.frame()
result_usd_PO3 <- list()
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[4]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[6]]
actual_usd[[i]] <- test_dataset[[i]][,i+3]
if(predictor_order[i]==3){ neurons<-seq(2,20,1)}
if(predictor_order[i]==4){ neurons<-seq(3,20,1)}
if(predictor_order[i]==5){ neurons<-seq(3,20,1)}
if(predictor_order[i]==6){ neurons<-seq(4,20,1)}
if(predictor_order[i]==7){ neurons<-seq(4,20,1)}
if(predictor_order[i]==8){ neurons<-seq(5,20,1)}
if(predictor_order[i]==9){ neurons<-seq(5,20,1)}
if(predictor_order[i]==10){ neurons<-seq(6,20,1)}
for (l in 1:length(learning_rate) ){
for (k in 1:length(activation_func)) {
for (j in 1:length(neurons)) {
train_dataset_PO3 <- train_dataset[[i]]
test_dataset_PO3 <- test_dataset[[i]]
test_date_PO3 <- test_date[[i]]
usd_non_normalize_PO3 <-   usd_non_normalize[[i]]
actual_usd_PO3 <-  actual_usd[[i]]
result_usd_PO3[[j]] <-  HOMO(train_dataset_PO3,test_dataset_PO3, usd_non_normalize_PO3,
neurons = neurons[j], predictor_order[i],
activation_func[k],learning_rate[l])
result_HOMO_USD[count2,] <-c(predictor_order[i],neurons[j],
result_usd_PO3[[j]][4],result_usd_PO3[[j]][5],
activation_func[k],learning_rate[l])
Result_USD_HOMO_LIST[[count]] <- list(predictor_order[i],neurons[j],learning_rate[l],
activation_func[k], result_usd_PO3[[j]])
count <- count +1
count2 <- count2 +1
}
}
}
}
train_dataset <- list()
test_dataset <- list()
test_date <- list()
usd_non_normalize <- list()
result_usd <- list()
actual_usd <- list()
Result_USD_HOMO_LIST <- list()
count <- 1
count2 <- 1
### Changes in Neurons and Learning Functins and Learning Rate
for (i in 1:length(predictor_order)) {
result_HOMO_USD <- data.frame("Predictor_Order"=numeric(),"Neurons"=numeric(),"RMSE"=numeric(),
"MAE"=numeric(),"Activation_Function"=character(),"Learning_Rate"=numeric(),
stringsAsFactors=FALSE)
usd_non_normalize_PO3 <- data.frame()
test_date_PO3 <- data.frame()
actual_usd_PO3 <- data.frame()
result_usd_PO3 <- list()
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[4]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[6]]
actual_usd[[i]] <- test_dataset[[i]][,i+3]
if(predictor_order[i]==3){ neurons<-seq(2,20,1)}
if(predictor_order[i]==4){ neurons<-seq(3,20,1)}
if(predictor_order[i]==5){ neurons<-seq(3,20,1)}
if(predictor_order[i]==6){ neurons<-seq(4,20,1)}
if(predictor_order[i]==7){ neurons<-seq(4,20,1)}
if(predictor_order[i]==8){ neurons<-seq(5,20,1)}
if(predictor_order[i]==9){ neurons<-seq(5,20,1)}
if(predictor_order[i]==10){ neurons<-seq(6,20,1)}
for (l in 1:length(learning_rate) ){
for (k in 1:length(activation_func)) {
for (j in 1:length(neurons)) {
train_dataset_PO3 <- train_dataset[[i]]
test_dataset_PO3 <- test_dataset[[i]]
test_date_PO3 <- test_date[[i]]
usd_non_normalize_PO3 <-   usd_non_normalize[[i]]
actual_usd_PO3 <-  actual_usd[[i]]
result_usd_PO3[[j]] <-  HOMO(train_dataset_PO3,test_dataset_PO3, usd_non_normalize_PO3,
neurons = neurons[j], predictor_order[i],
activation_func[k],learning_rate[l])
result_HOMO_USD[count2,] <-c(predictor_order[i],neurons[j],
result_usd_PO3[[j]][4],result_usd_PO3[[j]][5],
activation_func[k],learning_rate[l])
Result_USD_HOMO_LIST[[count]] <- list(predictor_order[i],neurons[j],learning_rate[l],
activation_func[k], result_usd_PO3[[j]])
count <- count +1
count2 <- count2 +1
}
}
}
}
View(result_HOMO_USD)
View(result_HOMO_USD)
View(best)
View(result)
result <- as.tbl(result_HOMO_USD)
min_value <- min(result$RMSE)
for (i in 1:length(result$RMSE)) {
if(result$RMSE== min_value)
row_select <- i
}
for (i in 1:length(result$RMSE)) {
if(result$RMSE== min_value){
row_select <- i
}
}
length(result$RMSE)
for (i in 1:length(result$RMSE)) {
if(result$RMSE[i]== min_value){
row_select <- i
}
}
row_select
result <- as.tbl(result_HOMO_USD)
min_value <- min(result$RMSE)
best <- filter(try, RMSE == min(result$RMSE))
for (i in 1:length(result$RMSE)) {
if(result$RMSE[i]== min_value){
row_select <- i
}
}
predictor_order <- best$Predictor_Order
neurons <- best$Neurons
activation_func <- best$Activation_Function
learning_rate <- best$Learning_Rate
predict_value<- Result_USD_HOMO_LIST[[row_select]][[5]][[1]]       ##[[the row number in result_HOMO_*]][[5]][[1]]
predict_error <- Result_USD_HOMO_LIST[[row_select]][[5]][[2]]      ##[[the row number in result_HOMO_*]][[5]][[2]]
homo_model1 <- Result_USD_HOMO_LIST[[row_select]][[5]][[6]][[1]]   ##[[the row number in result_HOMO_*][[5]][[6]][[1]]
homo_model2 <- Result_USD_HOMO_LIST[[row_select]][[5]][[6]][[2]]   ##[[the row number in result_HOMO_*][[5]][[6]][[2]]
homo_model3 <- Result_USD_HOMO_LIST[[row_select]][[5]][[6]][[3]]   ##[[the row number in result_HOMO_*][[5]][[6]][[3]]
predictor_order
validate_data <- data_set[[1]][[predictor_order-2]][[3]]                  ## [[currency]][[predictor_order-2]][[1:6]] 1.Traindata,
test_data <- data_set[[1]][[predictor_order-2]][[2]]                      # 2. TestData 3. Validate Data 4.Test_Date 5. Validate_Date
usd_non_normalize <- data_set[[1]][[predictor_order - 2]][[6]]
model_results <- neuralnet::compute(homo_model1, validate_data[1:predictor_order])
predicted_oneDayhead <- denormalized(model_results$net.result,usd_non_normalize)
model_results2 <- neuralnet::compute(homo_model2, validate_data[1:predictor_order])
predicted_oneDayhead2 <- denormalized(model_results2$net.result,usd_non_normalize)
model_results3 <- neuralnet::compute(homo_model3, validate_data[1:predictor_order])
predicted_oneDayhead3 <- denormalized(model_results3$net.result,usd_non_normalize)
all_predicted <- cbind(predicted_oneDayhead,predicted_oneDayhead2,predicted_oneDayhead3)
all_predicted <-as.data.frame(all_predicted)
actual <- denormalized(validate_data[,predictor_order+1],usd_non_normalize)
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
error_mean <- actual - mean_value
error_all_after_fusion <- as.data.frame(cbind(error_min,error_max,error_mean))
names(error_all_after_fusion) <- c("MIN","MAX","MEAN")
rmse_min <- rmse(error_all_after_fusion$MIN)
mae_min <- mae(error_all_after_fusion$MIN)
rmse_max <- rmse(error_all_after_fusion$MAX)
mae_max <- mae(error_all_after_fusion$MAX)
rmse_mean <- rmse(error_all_after_fusion$MEAN)
mae_mean<- mae(error_all_after_fusion$MEAN)
rmse_rate <- min(rmse_min,rmse_max,rmse_mean)
if(rmse_rate == rmse_max ){
final_result_val = list(unname(max_value),unname(error_max),"MAX",rmse_rate,mae_max)
}
if(rmse_rate == rmse_min ){
final_result_val = list(unname(min_value),unname(error_min),"MIN",rmse_rate,mae_min)
}
if(rmse_rate == rmse_mean){
final_result_val = list(unname(mean_value),unname(error_mean),"MEAN",rmse_rate,mae_mean)
}
usd_non_normalize <- data_set[[1]][[predictor_order - 2]][[6]]
model_results <- neuralnet::compute(homo_model1, test_data[1:predictor_order])
predicted_oneDayhead <- denormalized(model_results$net.result,usd_non_normalize)
model_results2 <- neuralnet::compute(homo_model2, test_data[1:predictor_order])
predicted_oneDayhead2 <- denormalized(model_results2$net.result,usd_non_normalize)
model_results3 <- neuralnet::compute(homo_model3, test_data[1:predictor_order])
predicted_oneDayhead3 <- denormalized(model_results3$net.result,usd_non_normalize)
all_predicted <- cbind(predicted_oneDayhead,predicted_oneDayhead2,predicted_oneDayhead3)
all_predicted <-as.data.frame(all_predicted)
actual <- denormalized(validate_data[,predictor_order+1],usd_non_normalize)
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
error_mean <- actual - mean_value
error_all_after_fusion <- as.data.frame(cbind(error_min,error_max,error_mean))
names(error_all_after_fusion) <- c("MIN","MAX","MEAN")
rmse_min <- rmse(error_all_after_fusion$MIN)
result <- as.tbl(result_HOMO_USD)
min_value <- min(result$RMSE)
best <- filter(try, RMSE == min(result$RMSE))
for (i in 1:length(result$RMSE)) {
if(result$RMSE[i]== min_value){
row_select <- i
}
}
predictor_order <- best$Predictor_Order
neurons <- best$Neurons
activation_func <- best$Activation_Function
learning_rate <- best$Learning_Rate
homo_model1 <- Result_USD_HOMO_LIST[[row_select]][[5]][[6]][[1]]   ##[[the row number in result_HOMO_*][[5]][[6]][[1]]
homo_model2 <- Result_USD_HOMO_LIST[[row_select]][[5]][[6]][[2]]   ##[[the row number in result_HOMO_*][[5]][[6]][[2]]
homo_model3 <- Result_USD_HOMO_LIST[[row_select]][[5]][[6]][[3]]   ##[[the row number in result_HOMO_*][[5]][[6]][[3]]
validate_data <- data_set[[1]][[predictor_order-2]][[3]]                  ## [[currency]][[predictor_order-2]][[1:6]] 1.Traindata,
test_data <- data_set[[1]][[predictor_order-2]][[2]]                      # 2. TestData 3. Validate Data 4.Test_Date 5. Validate_Date
# 6. actual whole dataset
#Applying three models to valadatation dataset
usd_non_normalize <- data_set[[1]][[predictor_order - 2]][[6]]
model_results <- neuralnet::compute(homo_model1, test_data[1:predictor_order])
predicted_oneDayhead <- denormalized(model_results$net.result,usd_non_normalize)
model_results2 <- neuralnet::compute(homo_model2, test_data[1:predictor_order])
predicted_oneDayhead2 <- denormalized(model_results2$net.result,usd_non_normalize)
model_results3 <- neuralnet::compute(homo_model3, test_data[1:predictor_order])
predicted_oneDayhead3 <- denormalized(model_results3$net.result,usd_non_normalize)
all_predicted <- cbind(predicted_oneDayhead,predicted_oneDayhead2,predicted_oneDayhead3)
all_predicted <-as.data.frame(all_predicted)
actual <- denormalized(validate_data[,predictor_order+1],usd_non_normalize)
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
length(actual)
length(min_rank())
length(min_value
)
actual <- denormalized(test_data[,predictor_order+1],usd_non_normalize)
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
error_mean <- actual - mean_value
error_all_after_fusion <- as.data.frame(cbind(error_min,error_max,error_mean))
names(error_all_after_fusion) <- c("MIN","MAX","MEAN")
rmse_min <- rmse(error_all_after_fusion$MIN)
mae_min <- mae(error_all_after_fusion$MIN)
rmse_max <- rmse(error_all_after_fusion$MAX)
mae_max <- mae(error_all_after_fusion$MAX)
rmse_mean <- rmse(error_all_after_fusion$MEAN)
mae_mean<- mae(error_all_after_fusion$MEAN)
rmse_rate <- min(rmse_min,rmse_max,rmse_mean)
if(rmse_rate == rmse_max ){
final_result_val = list(unname(max_value),unname(error_max),"MAX",rmse_rate,mae_max)
}
if(rmse_rate == rmse_min ){
final_result_val = list(unname(min_value),unname(error_min),"MIN",rmse_rate,mae_min)
}
if(rmse_rate == rmse_mean){
final_result_val = list(unname(mean_value),unname(error_mean),"MEAN",rmse_rate,mae_mean)
}
train_per <- 0.8
data_set_8 <- data_spliting(url,train_per)
train_dataset <- list()
test_dataset <- list()
predictor_order <- 3
test_date <- list()
usd_non_normalize <- list()
result_usd <- list()
actual_usd <- list()
learning_rate <- 0.1
activation_func <- c("logistic")
data_set <- data_set_8
source("HOMO.R")
Result_USD_HOMO_LIST_80 <- list()
count <- 1
count2 <- 1
### Changes in Neurons and Learning Functins and Learning Rate
for (i in 1:length(predictor_order)) {
result_HOMO_USD <- data.frame("Predictor_Order"=numeric(),"Neurons"=numeric(),"RMSE"=numeric(),
"MAE"=numeric(),"Activation_Function"=character(),"Learning_Rate"=numeric(),
stringsAsFactors=FALSE)
usd_non_normalize_PO3 <- data.frame()
test_date_PO3 <- data.frame()
actual_usd_PO3 <- data.frame()
result_usd_PO3 <- list()
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[4]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[6]]
actual_usd[[i]] <- test_dataset[[i]][,i+3]
if(predictor_order[i]==3){ neurons<-seq(2,20,1)}
if(predictor_order[i]==4){ neurons<-seq(3,20,1)}
if(predictor_order[i]==5){ neurons<-seq(3,20,1)}
if(predictor_order[i]==6){ neurons<-seq(4,20,1)}
if(predictor_order[i]==7){ neurons<-seq(4,20,1)}
if(predictor_order[i]==8){ neurons<-seq(5,20,1)}
if(predictor_order[i]==9){ neurons<-seq(5,20,1)}
if(predictor_order[i]==10){ neurons<-seq(6,20,1)}
for (l in 1:length(learning_rate) ){
for (k in 1:length(activation_func)) {
for (j in 1:length(neurons)) {
train_dataset_PO3 <- train_dataset[[i]]
test_dataset_PO3 <- test_dataset[[i]]
test_date_PO3 <- test_date[[i]]
usd_non_normalize_PO3 <-   usd_non_normalize[[i]]
actual_usd_PO3 <-  actual_usd[[i]]
result_usd_PO3[[j]] <-  HOMO(train_dataset_PO3,test_dataset_PO3, usd_non_normalize_PO3,
neurons = neurons[j], predictor_order[i],
activation_func[k],learning_rate[l])
result_HOMO_USD[count2,] <-c(predictor_order[i],neurons[j],
result_usd_PO3[[j]][4],result_usd_PO3[[j]][5],
activation_func[k],learning_rate[l])
Result_USD_HOMO_LIST_80[[count]] <- list(predictor_order[i],neurons[j],learning_rate[l],
activation_func[k], result_usd_PO3[[j]])
count <- count +1
count2 <- count2 +1
}
}
}
}
# Writing result to xlsx file
library(xlsx)
write.xlsx(result_HOMO_USD,"result_HOMO_USD_Train_80.xlsx")
result <- as.tbl(result_HOMO_USD)
min_value <- min(result$RMSE)
best <- filter(result, RMSE == min(result$RMSE))
View(best)
for (i in 1:length(result$RMSE)) {
if(result$RMSE[i]== min_value){
row_select <- i
}
}
predictor_order <- best$Predictor_Order
neurons <- best$Neurons
activation_func <- best$Activation_Function
learning_rate <- best$Learning_Rate
predict_value<- Result_USD_HOMO_LIST[[row_select]][[5]][[1]]       ##[[the row number in result_HOMO_*]][[5]][[1]]
predict_error <- Result_USD_HOMO_LIST_80[[row_select]][[5]][[2]]      ##[[the row number in result_HOMO_*]][[5]][[2]]
predict_value<- Result_USD_HOMO_LIST_80[[row_select]][[5]][[1]]       ##[[the row number in result_HOMO_*]][[5]][[1]]
predict_error <- Result_USD_HOMO_LIST_80[[row_select]][[5]][[2]]      ##[[the row number in result_HOMO_*]][[5]][[2]]
his(predict_error)
hist(predict_error)
homo_model1 <- Result_USD_HOMO_LIST[[row_select]][[5]][[6]][[1]]   ##[[the row number in result_HOMO_*][[5]][[6]][[1]]
homo_model2 <- Result_USD_HOMO_LIST[[row_select]][[5]][[6]][[2]]   ##[[the row number in result_HOMO_*][[5]][[6]][[2]]
homo_model3 <- Result_USD_HOMO_LIST[[row_select]][[5]][[6]][[3]]   ##[[the row number in result_HOMO_*][[5]][[6]][[3]]
validate_data <- data_set[[1]][[predictor_order-2]][[3]]                  ## [[currency]][[predictor_order-2]][[1:6]] 1.Traindata,
test_data <- data_set[[1]][[predictor_order-2]][[2]]                      # 2. TestData 3. Validate Data 4.Test_Date 5. Validate_Date
usd_non_normalize <- data_set[[1]][[predictor_order - 2]][[6]]
model_results <- neuralnet::compute(homo_model1, validate_data[1:predictor_order])
predicted_oneDayhead <- denormalized(model_results$net.result,usd_non_normalize)
model_results2 <- neuralnet::compute(homo_model2, validate_data[1:predictor_order])
predicted_oneDayhead2 <- denormalized(model_results2$net.result,usd_non_normalize)
model_results3 <- neuralnet::compute(homo_model3, validate_data[1:predictor_order])
predicted_oneDayhead3 <- denormalized(model_results3$net.result,usd_non_normalize)
all_predicted <- cbind(predicted_oneDayhead,predicted_oneDayhead2,predicted_oneDayhead3)
all_predicted <-as.data.frame(all_predicted)
actual <- denormalized(validate_data[,predictor_order+1],usd_non_normalize)
min_value <-apply(all_predicted,1, min)
max_value <- apply(all_predicted,1,max)
mean_value <- apply(all_predicted,1,mean)
error_min <- actual - min_value
error_max <- actual - max_value
error_mean <- actual - mean_value
error_all_after_fusion <- as.data.frame(cbind(error_min,error_max,error_mean))
names(error_all_after_fusion) <- c("MIN","MAX","MEAN")
rmse_min <- rmse(error_all_after_fusion$MIN)
mae_min <- mae(error_all_after_fusion$MIN)
rmse_max <- rmse(error_all_after_fusion$MAX)
mae_max <- mae(error_all_after_fusion$MAX)
rmse_mean <- rmse(error_all_after_fusion$MEAN)
mae_mean<- mae(error_all_after_fusion$MEAN)
rmse_rate <- min(rmse_min,rmse_max,rmse_mean)
if(rmse_rate == rmse_max ){
final_result_val = list(unname(max_value),unname(error_max),"MAX",rmse_rate,mae_max)
}
if(rmse_rate == rmse_min ){
final_result_val = list(unname(min_value),unname(error_min),"MIN",rmse_rate,mae_min)
}
if(rmse_rate == rmse_mean){
final_result_val = list(unname(mean_value),unname(error_mean),"MEAN",rmse_rate,mae_mean)
}
hist(final_result_val[[2]])
View(best)
View(result_HETRO_USD)
result_hetro <- as.tbl(result_HETRO_USD)
library("dplyr")
result_hetro <- as.tbl(result_HETRO_USD)
min_hetro_value <- min(result_hetro$RMSE)
best <- filter(result_hetro, RMSE == min_hetro_value)
best_hetro <- filter(result_hetro, RMSE == min_hetro_value)
result <- as.tbl(result_HOMO_USD)
min_value <- min(result$RMSE)
best <- filter(result, RMSE == min(result$RMSE))
for (i in 1:length(result_hetro$RMSE)) {
if(result$RMSE[i]== min_value){
row_select <- i
}
}
for (i in 1:length(result_hetro$RMSE)) {
if(result$RMSE[i]== min_hetro_value){
row_select <- i
}
}
for (i in 1:length(result_hetro$RMSE)) {
if(result_hetro$RMSE[i]== min_hetro_value){
row_select <- i
}
}
View(best_hetro)
result <- as.tbl(result_HOMO_USD)
min_value <- min(result$RMSE)
best <- filter(result, RMSE == min(result$RMSE))
for (i in 1:length(result$RMSE)) {
if(result$RMSE[i]== min_value){
row_select <- i
}
}
predictor_order <- best$Predictor_Order
neurons <- best$Neurons
activation_func <- best$Activation_Function
learning_rate <- best$Learning_Rate
for (i in 1:length(result_hetro$RMSE)) {
if(result_hetro$RMSE[i]== min_hetro_value){
row_select_hetro <- i
}
}
predict_value<- Result_USD_HOMO_LIST[[row_select]][[5]][[1]]       ##[[the row number in result_HOMO_*]][[5]][[1]]
url <- "/home/wut/Desktop/Link to Data/FYP Program/Data/alldata.csv"
source("data_spliting.R")
train_per <- 0.6
data_set <- data_spliting(url,train_per)
url <- "/home/wut/Desktop/Link to Data/FYP Program/Data/alldata.csv"
source("data_spliting.R")
train_per <- 0.6
data_set <- data_spliting(url,train_per)
load("/home/wut/Desktop/Link to Data/FYP Program/.RData")
rm(all_predicted)
rm(error)
rm(error_all_after_fusion)
rm(predicted_oneDayhead)
rm(predicted_oneDayhead2)
rm(predicted_oneDayhead3)
rm(error_max, error_mean, error_min)
