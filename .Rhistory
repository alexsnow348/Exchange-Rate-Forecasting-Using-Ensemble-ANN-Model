train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## HOMOGENEOUS MODEL
## Train the network using neuralnet (First MLP)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 2)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- denormalized(predicted_oneDayhead)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist(actual - predict_value)
rmse(error)
#Main Modeling & Training and Validation
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## HOMOGENEOUS MODEL
## Train the network using neuralnet (First MLP)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 2)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- denormalized(predicted_oneDayhead)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist(actual - predict_value)
rmse(error)
#Main Modeling & Training and Validation
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## HOMOGENEOUS MODEL
## Train the network using neuralnet (First MLP)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 2)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- denormalized(predicted_oneDayhead)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist(actual - predict_value)
rmse(error)
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"U.S. Dollar")
#Main Modeling & Training and Validation
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## HOMOGENEOUS MODEL
## Train the network using neuralnet (First MLP)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 2)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- denormalized(predicted_oneDayhead)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist(actual - predict_value)
rmse(error)
#Main Modeling & Training and Validation
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## HOMOGENEOUS MODEL
## Train the network using neuralnet (First MLP)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- denormalized(predicted_oneDayhead)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist(actual - predict_value)
rmse(error)
actual <- c(4, 6, 9, 10, 4, 6, 4, 7, 8, 7)
predicted <- c(5, 6, 8, 10, 4, 8, 4, 9, 8, 9)
error <- actual - predicted
rmse(error)
mae(error)
predicted <- c(4, 6, 9, 10, 4, 6, 4, 7, 8, 7)
error <- actual - predicted
rmse(error)
mae(error)
#Main Modeling & Training and Validation
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## HOMOGENEOUS MODEL
## Train the network using neuralnet (First MLP)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- denormalized(predicted_oneDayhead)
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist(actual - predict_value)
rmse(error)
mae(error)
weight <- sample(0:1,3,replace = T)
weight <- sample(1:10,3,replace = T)
weight <- sample(1:10,3,replace = F)
weight = normalizeData(weight, type = "0_1")
weight <- sample(1:10,3,replace = F)
weight = normalizeData(weight, type = "0_1")
weight <- sample(1:10,3,replace = F)
weight = normalizeData(weight, type = "0_1")
?normalizeData
weight = normalizeData(weight, type = "norm")
weight <- sample(1:10,3,replace = F)
weight = normalizeData(weight, type = "norm")
data = train_dataset, hidden = 3, learningrate = 0.1 , startweights = weight )
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3, learningrate = 0.1 , startweights = weight )
data = train_dataset, hidden = 3, learningrate = 0.1 )
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3, learningrate = 0.1 )
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3, learningrate = 0.1 )
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3, learningrate = 0.1 )
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3, learningrate = 0.1 )
exchange_model2
weight <- sample(1:10,length(train_dataset[,1]),replace = F)
size =length(train_dataset[,1])
weight <- sample(1:10,size,replace = F)
weight <- sample(1:10,size = size,replace = F)
weight <- sample(1:1000,size = size,replace = F)
weight = normalizeData(weight, type = "norm")
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3, learningrate = 0.1, startweights = weight )
head(weight)
weight = normalizeData(weight, type = "0_1")
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3, learningrate = 0.1, startweights = weight )
head(weight)
model_results2 <- neuralnet::compute(exchange_model2, test_dataset[1:3])
predicted_oneDayhead2 <- model_results2$net.result
predict_value2 <- denormalized(predicted_oneDayhead2)
error2 <- actual - predict_value2
hist(actual - predict_value2)
rmse(error2)
mae(error2)
data = train_dataset, hidden = 3, learningrate = 0.1 )
#Main Modeling & Training and Validation
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"U.S. Dollar")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3, learningrate = 0.1 )
model_results2 <- neuralnet::compute(exchange_model2, test_dataset[1:3])
predicted_oneDayhead2 <- model_results2$net.result
predict_value2 <- denormalized(predicted_oneDayhead2)
error2 <- actual - predict_value2
hist(actual - predict_value2)
rmse(error2)
mae(error2)
actual <- denormalized(test_dataset[,4])
error2 <- actual - predict_value2
hist(actual - predict_value2)
rmse(error2)
mae(error2)
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 3 )
model_results2 <- neuralnet::compute(exchange_model2, test_dataset[1:3])
predicted_oneDayhead2 <- model_results2$net.result
predict_value2 <- denormalized(predicted_oneDayhead2)
actual <- denormalized(test_dataset[,4])
error2 <- actual - predict_value2
hist(actual - predict_value2)
rmse(error2)
mae(error2)
exchange_model2 <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 2)
model_results2 <- neuralnet::compute(exchange_model2, test_dataset[1:3])
predicted_oneDayhead2 <- model_results2$net.result
predict_value2 <- denormalized(predicted_oneDayhead2)
actual <- denormalized(test_dataset[,4])
error2 <- actual - predict_value2
hist(actual - predict_value2)
rmse(error2)
mae(error2)
library("rnn")
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## Training
input_day1 <- as.matrix(train_dataset[,1])
input_day2 <- as.matrix(train_dataset[,2])
input_day3 <- as.matrix(train_dataset[,3])
output_matrix <- as.matrix(train_dataset[,4])
input_try <- array( c(input_day1,input_day2,input_day3) , dim=c(dim(input_day1),1) )
output_try <- array(output_matrix, dim=c(dim(output_matrix),1))
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 2
)
test_input_day1 <- as.matrix(test_dataset[,1])
test_input_day2 <- as.matrix(test_dataset[,2])
test_input_day3 <- as.matrix(test_dataset[,3])
test_input_try <- array( c(test_input_day1,test_input_day2,test_input_day3) , dim=c(dim(test_input_day3),1) )
test_result <- predictr(model, test_input_try )
predict_value <- (denormalized(test_result))
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist( actual-predict_value )
rmse(error)
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## HETROGENEOUS  MODEL
## Train the network using neuralnet (First MLP)
exchange_model <- neuralnet(oneDayAhead ~ firstDay + secondDay + thirdDay,
data = train_dataset, hidden = 2)
model_results <- neuralnet::compute(exchange_model, test_dataset[1:3])
predicted_oneDayhead <- model_results$net.result
predict_value <- as.data.frame(denormalized(predicted_oneDayhead))
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
rmse(error)
mae(error)
predict_value <- denormalized(predicted_oneDayhead)
rmse(error)
mae(error)
error <- actual - predict_value
rmse(error)
mae(error)
hist(error)
?trainr
input_try <- array( c(input_day1,input_day2,input_day3) , dim=c(dim(input_day1),3) )
library("rnn")
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## Training
input_day1 <- as.matrix(train_dataset[,1])
input_day2 <- as.matrix(train_dataset[,2])
input_day3 <- as.matrix(train_dataset[,3])
output_matrix <- as.matrix(train_dataset[,4])
input_try <- array( c(input_day1,input_day2,input_day3) , dim=c(dim(input_day1),3) )
str(input_try)
head(input_try[1:1,1,1])
head(input_try[1:1,1,2])
head(input_try[1:1,1,])
output_try <- array(output_matrix, dim=c(dim(output_matrix),1))
str(output_try)
X1 = sample(0:127, 7000, replace=TRUE)
X2 = sample(0:127, 7000, replace=TRUE)
Y <- X1 + X2
X1 <- int2bin(X1, length=8)
X2 <- int2bin(X2, length=8)
Y  <- int2bin(Y,  length=8)
X <- array( c(X1,X2), dim=c(dim(X1),2) )
str(X)
str(Y)
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 2
)
test_input_day1 <- as.matrix(test_dataset[,1])
test_input_day2 <- as.matrix(test_dataset[,2])
test_input_day3 <- as.matrix(test_dataset[,3])
test_input_try <- array( c(test_input_day1,test_input_day2,test_input_day3) , dim=c(dim(test_input_day3),3) )
test_result <- predictr(model, test_input_try )
predict_value <- (denormalized(test_result))
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist( actual-predict_value )
rmse(error)
library("rnn")
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## Training
input_day1 <- as.matrix(train_dataset[,1])
input_day2 <- as.matrix(train_dataset[,2])
input_day3 <- as.matrix(train_dataset[,3])
output_matrix <- as.matrix(train_dataset[,4])
length(input_day1)
length(input_day1)
inital_weight <- sample(1:length(input_day1),length(input_day1), replace = F)
library("RSNNS")
inital_weight <- normalizeData(inital_weight, type = "0_1")
?trainr
?rnn
str(rnn)
library(rnn)
str(rnn)
rnn()
library("rnn")
library("RSNNS")
source("requried_functions_N_libraries.R")
source("Data_Processing.R")
dataset<- Data_Processing("/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata.csv",3,"Euro")
train_dataset <- dataset[[1]]
test_dataset <- dataset[[2]]
date <- dataset[[3]]
usd_non_normalize <- dataset[[4]]
## Training
input_day1 <- as.matrix(train_dataset[,1])
input_day2 <- as.matrix(train_dataset[,2])
input_day3 <- as.matrix(train_dataset[,3])
output_matrix <- as.matrix(train_dataset[,4])
input_try <- array( c(input_day1,input_day2,input_day3) , dim=c(dim(input_day1),3) )
output_try <- array(output_matrix, dim=c(dim(output_matrix),1))
inital_weight <- sample(1:length(input_day1),length(input_day1), replace = F)
set.seed(1)
inital_weight <- normalizeData(inital_weight, type = "0_1")
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 2,
batch_size = 100,
numepochs = 10
)
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 2,
batch_size = 100,
numepochs = 20
)
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 2,
batch_size = 100,
numepochs = 30
)
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 2,
batch_size = 100,
numepochs = 40
)
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 2,
batch_size = 200,
numepochs = 40
)
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 2,
batch_size = 100,
numepochs = 100
)
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 2,
batch_size = 100,
numepochs = 200
)
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 2,
batch_size = 100,
numepochs = 300
)
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 2,
batch_size = 100,
numepochs = 1000
)
test_input_day1 <- as.matrix(test_dataset[,1])
test_input_day2 <- as.matrix(test_dataset[,2])
test_input_day3 <- as.matrix(test_dataset[,3])
test_input_try <- array( c(test_input_day1,test_input_day2,test_input_day3) , dim=c(dim(test_input_day3),3) )
test_result <- predictr(model, test_input_try )
predict_value <- (denormalized(test_result))
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist( actual-predict_value )
error
rmse(error)
mae(error)
model$error
head(model$last_layer_error)
model <- trainr(Y=output_matrix,
X=input_try,
learningrate   =  0.1,
sigmoid = "logistic",
hidden_dim  = 2,
numepochs = 200
)
test_input_day1 <- as.matrix(test_dataset[,1])
test_input_day2 <- as.matrix(test_dataset[,2])
test_input_day3 <- as.matrix(test_dataset[,3])
test_input_try <- array( c(test_input_day1,test_input_day2,test_input_day3) , dim=c(dim(test_input_day3),3) )
test_result <- predictr(model, test_input_try )
predict_value <- (denormalized(test_result))
actual <- denormalized(test_dataset[,4])
error <- actual - predict_value
hist( actual-predict_value )
rmse(error)
mae(error)
library(RSNNS)
inputs <- as.matrix(seq(0,10,0.1))
str(inputs)
head(inputs)
outputs <- as.matrix(sin(inputs) + runif(inputs*0.2))
head(outputs)
outputs <- normalizeData(outputs, "0_1")
model <- rbf(inputs, outputs, size=40, maxit=1000,
initFuncParams=c(0, 1, 0, 0.01, 0.01),
learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut=TRUE)
par(mfrow=c(2,1))
plotIterativeError(model)
plot(inputs, outputs)
lines(inputs, fitted(model), col="green")
library(neural)
x<-t(matrix(-5:10*24,1,16));
x<-t(matrix(-5:10*24,1,16));
y<-t(matrix(sin(pi/180*(-5:10*24)),1,16));
neurons<-8;
data<-rbftrain(x,neurons,y,sigma=NaN)
inputs <- as.matrix(seq(0,10,0.1))
outputs <- as.matrix(sin(inputs) + runif(inputs*0.2))
outputs <- normalizeData(outputs, "0_1")
model <- rbf(inputs, outputs, size=40, maxit=1000,
initFuncParams=c(0, 1, 0, 0.01, 0.01),
learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut=F)
par(mfrow=c(2,1))
plotIterativeError(model)
plot(inputs, outputs)
lines(inputs, fitted(model), col="green")
model <- rbf(inputs, outputs, size=40, maxit=1000,
initFuncParams=c(0, 1, 0, 0.01, 0.01),
learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut=F)
library(RSNNS)
inputs <- as.matrix(seq(0,10,0.1))
outputs <- as.matrix(sin(inputs) + runif(inputs*0.2))
outputs <- normalizeData(outputs, "0_1")
model <- rbf(inputs, outputs, size=40, maxit=1000,
initFuncParams=c(0, 1, 0, 0.01, 0.01),
learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut=F)
model <- rbf(inputs, outputs, size=40, maxit=1000,
initFuncParams=c(0, 1, 0, 0.01, 0.01),
learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut= FALSE)
model <- rbf(inputs, outputs, size=40, maxit=1000,
initFuncParams=c(0, 1, 0, 0.01, 0.01),
learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut= T)
library(RSNNS)
inputs <- as.matrix(seq(0,10,0.1))
outputs <- as.matrix(sin(inputs) + runif(inputs*0.2))
outputs <- normalizeData(outputs, "0_1")
model <- rbf(inputs, outputs, size=40, maxit=1000,
initFuncParams=c(0, 1, 0, 0.01, 0.01),
learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut=TRUE)
