View(result_towrite_4)
library(xlsx)
write.xlsx(result_towrite_4, "reslut_USD_PO4.xlsx")
predictor_order <- seq(3,10,1)
train_dataset <- data_set[[1]][[1]][[1]]
View(train_dataset)
source("HOMO.R")                                        #   3. CAN    7, SWI   #   #  3. PO_5   7. PO_9
train_dataset <- list()                                 #   4. EURO            #   #  4. PO_6   8. PO_10
test_dataset <- list()
usd_non_normalize <- list()
actual_data <- list()
result_usd <- list()
predictor_order <- seq(3,10,1)
test_date <- list()
#USD_ONLY MODEL
for (i in 1:8) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- denormalized(test_dataset[[i]][,predictor_order+1],usd_non_normalize[[i]])
}
for (i in 1:8) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
#actual_data[[i]] <- denormalized(test_dataset[[i]][,predictor_order+1],usd_non_normalize[[i]])
}
for (i in 1:8) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
#actual_data[[i]] <- denormalized(test_dataset[[i]][,predictor_order+1],usd_non_normalize[[i]])
}
rm(test_date)
source("HOMO.R")                                        #   3. CAN    7, SWI   #   #  3. PO_5   7. PO_9
train_dataset <- list()                                 #   4. EURO            #   #  4. PO_6   8. PO_10
test_dataset <- list()
usd_non_normalize <- list()
actual_data <- list()
result_usd <- list()
predictor_order <- seq(3,10,1)
test_date <- list()
#USD_ONLY MODEL
for (i in 1:8) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
#actual_data[[i]] <- denormalized(test_dataset[[i]][,predictor_order+1],usd_non_normalize[[i]])
}
source("HOMO.R")                                        #   3. CAN    7, SWI   #   #  3. PO_5   7. PO_9
train_dataset <- list()                                 #   4. EURO            #   #  4. PO_6   8. PO_10
test_dataset <- list()
usd_non_normalize <- list()
actual_data <- list()
result_usd <- list()
predictor_order <- seq(3,10,1)
test_date <- list()
#USD_ONLY MODEL
for (i in 1:8) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- denormalized(test_dataset[[i]][,predictor_order+1],usd_non_normalize[[i]])
}
for (i in 1:8) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,predictor_order+1],usd_non_normalize[[i]]
}
for (i in 1:8) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,predictor_order+1]
}
test_dataset[[i]][,predictor_order+1]
test_dataset[[i]][predictor_order+1]
actual_col <- predictor_order+1
for (i in 1:8) {
actual_col <- predictor_order+1
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,actual_col]
}
test_dataset[[i]]
a <-test_dataset[[i]]
a <-test_dataset[[1]]
str(a)
a[,4]
a <-test_dataset[[1]][,4]
actual_data[[i]] <- test_dataset[[i]][,actual_col]
for (i in 1:8) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,i+3]
}
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,i+3]
}
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,i+3]
result_usd[[i]] <-  HOMO(train_dataset[[i]],test_dataset[[i]],usd_non_normalize[[i]],i+2,0.1)
}
rm(result_4)
rm(data_usd_pre_ord_4)
rm(data_usd_pre_ord_5)
result_towrite <- data.frame()
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,i+3]
result_usd[[i]] <-  HOMO(train_dataset[[i]],test_dataset[[i]],usd_non_normalize[[i]],i+2,0.1)
result_towrite <-rbind( result_towrite, c(i+2,(predictor_order[i]+1)/2, result_usd[[i]][,4], result_usd[[i]][,5],result_usd[[i]][,3]))
}
result_usd[[1]][,4]
result_usd[[1]][[1[,4]
{{}}
for (j in 1:8) {
result_towrite <-rbind( result_towrite, c(i+2,(predictor_order[i]+1)/2, result_usd[[i]][[j]][,4], result_usd[[i]][[j]][,5],result_usd[[i]][[j]][,3]))
}
result_usd[[1]][[1]][,4]
result_usd[[1]][1][,4]
str(result_usd)
result_usd[1]
result_usd[1][[3]]
result_usd[1][[3]
]
result_usd[1][3]
result_usd[[1]][3]
result_towrite
result_towrite <-rbind( result_towrite, c(i+2,(predictor_order[i]+1)/2, result_usd[[i]][4], result_usd[[i]][5],result_usd[[i]][3]))
View(result_towrite)
View(result_towrite)
source("HOMO.R")                                        #   3. CAN    7, SWI   #   #  3. PO_5   7. PO_9
train_dataset <- list()                                 #   4. EURO            #   #  4. PO_6   8. PO_10
test_dataset <- list()
usd_non_normalize <- list()
actual_data <- list()
predictor_order <- seq(3,10,1)
test_date <- list()
result_usd <- list()
result_towrite <- data.frame()
#USD_ONLY MODEL
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,i+3]
result_usd[[i]] <-  HOMO(train_dataset[[i]],test_dataset[[i]],usd_non_normalize[[i]],i+2,0.1)
result_towrite <-rbind( result_towrite, c(i+2,(predictor_order[i]+1)/2, result_usd[[i]][4], result_usd[[i]][5],result_usd[[i]][3]))
}
rm(result_towrite_4)
rm(test_dataset_4)
rm(train_dataset_4)
rm(test_data_4)
rm(test_date_4)
rm(usd_non_normalize_4)
rm(date_4)
names(result_towrite) <- c("Predictor Order","Neurons","RMSE","MAE","OPIMIZED FUSION FUNC")
View(result_towrite)
View(result_towrite)
source("HOMO.R")                                        #   3. CAN    7, SWI   #   #  3. PO_5   7. PO_9
train_dataset <- list()                                 #   4. EURO            #   #  4. PO_6   8. PO_10
test_dataset <- list()
usd_non_normalize <- list()
actual_data <- list()
predictor_order <- seq(3,10,1)
test_date <- list()
result_usd <- list()
result_towrite <- data.frame()
#USD_ONLY MODEL
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,i+3]
result_usd[[i]] <-  HOMO(train_dataset[[i]],test_dataset[[i]],usd_non_normalize[[i]],i+2,0.1)
result_towrite <-rbind( result_towrite, c(i+2,ceiling(predictor_order[i]+1)/2, result_usd[[i]][4], result_usd[[i]][5],result_usd[[i]][3]))
}
View(result_towrite)
View(result_towrite)
source("HOMO.R")                                        #   3. CAN    7, SWI   #   #  3. PO_5   7. PO_9
train_dataset <- list()                                 #   4. EURO            #   #  4. PO_6   8. PO_10
test_dataset <- list()
usd_non_normalize <- list()
actual_data <- list()
predictor_order <- seq(3,10,1)
test_date <- list()
result_usd <- list()
result_towrite <- data.frame()
#USD_ONLY MODEL
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_data[[i]] <- test_dataset[[i]][,i+3]
result_usd[[i]] <-  HOMO(train_dataset[[i]],test_dataset[[i]],usd_non_normalize[[i]],i+2,0.1)
result_towrite <-rbind( result_towrite, c(i+2,ceiling((predictor_order[i]+1)/2), result_usd[[i]][4], result_usd[[i]][5],result_usd[[i]][3]))
}
names(result_towrite) <- c("Predictor Order","Neurons","RMSE","MAE","OPIMIZED FUSION FUNC")
View(result_towrite)
View(result_towrite)
??neuralnet
library(xlsx)
write.xlsx(result_towrite_4, "old_MLP_result.xlsx")
write.xlsx(result_towrite, "old_MLP_result.xlsx")
source("MLP1.R")
data_try_4 <-data_set[[1]][[2]]
str(data_try_4)
train_dataset[[i]] <- data_try_4[[1]][[1]]
train_dataset <- data_try_4[[1]][[1]]
train_dataset <- data_try_4[[1]][1]
train_dataset <- data_try_4[[1]]
test_dataset[[i]] <- data_try_4[[1]]
train_dataset <- data_try_4[[1]]
test_dataset <- data_try_4[[2]]
test_date <- data_try_4[[3]]
usd_non_normalize<- data_try_4[[4]]
actual_data<- test_dataset[,5]
## FIRST MLP
set.seed(1)
weight_size =length(train_dataset[,1])
weight1 <- sample(1:1000,size = weight_size,replace = F)
weight1 = normalizeData(weight1, type = "0_1")
## Train the network using neuralnet (First MLP)
first <- MLP( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight1)
first <- MLP1( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight1)
first <- MLP1( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight1)
source("MLP1.R")
predictor_order <- 4
first <- MLP1( train_dataset,test_dataset,usd_non_normalize,predictor_order,learning_rate,weight1)
neurons <- 3
first <- MLP1( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weight1)
source("MLP1.R")
first <- MLP1( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weight1)
source("MLP1.R")
first <- MLP1( train_dataset,test_dataset,usd_non_normalize,predictor_order,neurons,learning_rate,weight1)
data_try_4 <-data_set[[1]][[2]]
train_dataset <- data_try_4[[1]]
test_dataset <- data_try_4[[2]]
test_date <- data_try_4[[3]]
usd_non_normalize<- data_try_4[[4]]
actual_data<- test_dataset[,5]
predictor_order <- 4
neurons <- 3
train_input <- as.matrix(train_dataset[,1:predictor_order])
train_output <- as.matrix(train_dataset[,predictor_order+1])
test_input <- as.matrix(test_dataset[,1:predictor_order])
test_actual <- as.vector(test_dataset[,predictor_order+1])
data<-mlptrain(train_input,neurons,train_output, weight = weights ,alfa= learning_rate , it= 1000, sigma=NaN,visual = F)
result <- mlp(test_input,data$weight,data$dist,data$neurons,data$sigma)
data<-mlptrain(train_input,neurons,train_output ,alfa= learning_rate , it= 1000,visual = F)
result <- mlp(test_input,data$weight,data$dist,data$neurons,data$sigma)
result <- as.vector(result)
result <- denormalized(result,usd_non_normalize)
test_actual <- denormalized(test_actual,usd_non_normalize)
error <- test_actual - result
rmse(error)
train_output <- as.matrix(train_dataset[,predictor_order+1])
test_input <- as.matrix(test_dataset[,1:predictor_order])
test_actual <- as.vector(test_dataset[,predictor_order+1])
data<-mlptrain(train_input,neurons,train_output ,alfa= learning_rate , it= 1000,visual = F)
result <- mlp(test_input,data$weight,data$dist,data$neurons,data$sigma)
result <- as.vector(result)
result <- denormalized(result,usd_non_normalize)
test_actual <- denormalized(test_actual,usd_non_normalize)
error <- test_actual - result
rmse(error)
data$weight
data$actfns
require("neural")
data<-mlptrain(train_input,neurons,train_output ,alfa= learning_rate , actfns = c(1,2),it= 100,visual = T)
result <- mlp(test_input,data$weight,data$dist,data$neurons,data$sigma)
result <- as.vector(result)
result <- denormalized(result,usd_non_normalize)
test_actual <- denormalized(test_actual,usd_non_normalize)
error <- test_actual - result
rmse(error)
data$actfns
data<-mlptrain(train_input,neurons,train_output ,alfa= learning_rate , actfns = c(1),it= 2000,visual = T)
data<-mlptrain(train_input,neurons,train_output ,alfa= learning_rate , actfns = c(1),it= 2000,visual = T)
data<-mlptrain(train_input,neurons,train_output ,alfa= learning_rate , actfns = c(1,1),it= 2000,visual = T)
result <- mlp(test_input,data$weight,data$dist,data$neurons,data$sigma)
result <- as.vector(result)
result <- denormalized(result,usd_non_normalize)
test_actual <- denormalized(test_actual,usd_non_normalize)
error <- test_actual - result
rmse(error)
final_result <- list(predict_value,error)
return(final_result)
}
result <- as.vector(result)
result <- denormalized(result,usd_non_normalize)
test_actual <- denormalized(test_actual,usd_non_normalize)
error <- test_actual - result
rmse(error)
data_try_4 <-data_set[[1]][[2]]
train_dataset <- data_try_4[[1]]
test_dataset <- data_try_4[[2]]
test_date <- data_try_4[[3]]
usd_non_normalize<- data_try_4[[4]]
actual_data<- test_dataset[,5]
predictor_order <- 4
neurons <- 3
train_input <- as.matrix(train_dataset[,1:predictor_order])
train_output <- as.matrix(train_dataset[,predictor_order+1])
test_input <- as.matrix(test_dataset[,1:predictor_order])
test_actual <- as.vector(test_dataset[,predictor_order+1])
data<-mlptrain(train_input,neurons,train_output,weight = weights,alfa= learning_rate, actfns = c(1,1), it= 100,visual = T)
r_w <- matrix(data= seq(1,10,12),1:4, 1:3)
data = seq(1,10,11)
?seq
data = seq(1,10,1)
r_w <- matrix(data= seq(1,10,1),1:4, 1:3)
r_w <- matrix(data= seq(1,12,1),1:4, 1:3)
data = seq(1,12,1)
r_w <- matrix(,1:4, 1:3)
r_w <- matrix(data ,1:4, 1:3)
rw
r_w
matrix
r_w <- array()
str(array)
array(data)
array(data, c(1,2))
array(data, 1,4)
array(data, 1:4)
array(data, 4)
data<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, actfns = c(1,1), it= 100,visual = T)
data$weight[[1]]
data$weight[[2]]
result <- mlp(test_input,data$weight,data$dist,data$neurons,data$sigma)
result <- as.vector(result)
result <- denormalized(result,usd_non_normalize)
test_actual <- denormalized(test_actual,usd_non_normalize)
error <- test_actual - result
rmse(error)
data<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, actfns = c(1,1), weight= weights, it= 100,visual = T)
length(weight1)
data<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, actfns = c(1,1), weight= weights, it= 50,visual = T)
data<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, actfns = c(1,1), it= 50,visual = T)
result <- mlp(test_input,data$weight,data$dist,data$neurons,data$sigma)
result <- as.vector(result)
result <- denormalized(result,usd_non_normalize)
test_actual <- denormalized(test_actual,usd_non_normalize)
error <- test_actual - result
rmse(error)
str(data$weight[[1]])
str(data$weight[[2]])
str(data$weight[[2])
str(data$weight[2])
r_w <-sample(1:10,12,replace = T)
r_w <- normalized(r_w)
set.seed(1)
r_w <-sample(1:10,12,replace = T)
r_w <- normalized(r_w)
head(r_w)
set.seed(1)
rw <-sample(1:10,12,replace = T)
rw <- normalized(rw)
head(rw)
set.seed(1)
rw <-sample(1:10,3,replace = T)
rw <- normalized(rw)
str(as.matrix)
r_w <- as.matrix(r_w, nrow(4), ncol(3))
data<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, actfns = c(1,1), it= 50,visual = T)
rw <-sample(1:10,3,replace = T)
set.seed(1)
r_w <- sample(1:10,12 , replace = T)
r_w <- normalized(r_w)
rw <- normalized(rw)
try <- matrix(r_w, 4,3)
try
set.seed(1)
weight1 <- sample(1:10,size = predictor_order*neurons, replace = T)
weight1 = normalized(weight1)
weight1_out <- sample(1:10,predictor_order,replace = T)
weight1_out <- sample(1:10,neurons,replace = T)
weight1_out <- normalized(weight1_out)
weights <- list(weight1,weight)
weights <- list(weight1,weight1_out)
set.seed(1)
weight1<- sample(1:10,size = predictor_order*neurons, replace = T)
weight1<- normalized(weight1)
weight1_out <- sample(1:10,neurons,replace = T)
weight1_out <- normalized(weight1_out)
weights <- list(weight1,weight1_out)
data<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, actfns = c(1,1), it= 50, weight = weights,visual = T)
weights <- list(weight1,weight1_out)
nrow(weights[[1]])
nrow(weights[1])
weights[[1]]
weights[[2]]
weight1 <- as.matrix(weight1,4,3)
weights <- list(weight1,weight1_out)
weights <- list(weight1,weight1_out)
weight1 <- as.matrix(weight1,4,3)
weight1 <- matrix(weight1,4,3)
weights <- list(weight1,weight1_out)
data<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, actfns = c(1,1), it= 50, weight = weights,visual = T)
weights[[1]]
nrow(weights[[1]])
data<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, actfns = c(1,1), it= 50, weight = weights,visual = T)
data<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, actfns = c(1,1), it= 50,visual = T)
?inspect
??inspect
data_w<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, weight = c(weight1,weight1_out) ,actfns = c(1,1), it= 50,visual = T)
weight1<- sample(1:10,size = length(train_dataset[,1]), replace = T)
weight1<- normalized(weight1)
weight1 <- matrix(weight1,predictor_order,neurons)
weight1_out <- sample(1:10,length(train_dataset[,1]),replace = T)
weight1_out <- normalized(weight1_out)
weight1_out <- matrix(weight1_out,neurons)
data_w<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, weight = weight1  ,actfns = c(1,1), it= 50,visual = T)
length(weight1)
weight1 <- matrix(weight1,predictor_order,neurons)
length(weight1)
length(weight1[[1]])
length(weight1[1)
length(weight1[1])
data_w<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, weight = c(weight1,weight1_out) ,actfns = c(1,1), it= 50,visual = T)
?mlp
weight1<- sample(1:10,size = length(train_dataset[,1]), replace = T)
weight1<- normalized(weight1)
data_w<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, weight =  weight1 ,actfns = c(1,1), it= 50,visual = T)
length(weight1)
length(weights)
weight1 <- matrix(weight1,predictor_order,neurons)
weight1_out <- sample(1:10,length(train_dataset[,1]),replace = T)
weight1_out <- normalized(weight1_out)
weight1_out <- matrix(weight1_out,neurons)
weights <- list(weight1,weight1_out)
data_w<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, weight =  weights ,actfns = c(1,1), it= 50,visual = T)
weight1_out <- matrix(weight1_out,,neurons)
weights <- list(weight1,weight1_out)
weight1_out <- matrix(weight1_out,ncol = neurons)
weights <- list(weight1,weight1_out)
data_w<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, weight =  weights ,actfns = c(1,1), it= 50,visual = T)
weight1_out <- matrix(weight1_out,nrow= predictor_order,ncol = neurons)
weights <- list(weight1,weight1_out)
data_w<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, weight =  weights ,actfns = c(1,1), it= 50,visual = T)
lenght(weights[[1]])
length(weights[[1]])
length(weights[[2]])
length(weights[[1]][1])
length(weights[[1]][{1}])
length(weights[[1]][[1]])
str(weights[[1]])
weight1 <- matrix(weight1,ncol=neurons)
weight1<- sample(1:10,size = length(train_dataset[,1]), replace = T)
weight1<- normalized(weight1)
weight1 <- matrix(weight1,ncol=neurons)
weight1_out <- sample(1:10,length(train_dataset[,1]),replace = T)
weight1_out <- normalized(weight1_out)
weight1_out <- matrix(weight1_out,ncol = neurons)
data_w<-mlptrain(train_input,neurons,train_output,alfa= learning_rate, weight =  weights ,actfns = c(1,1), it= 50,visual = T)
library(NeuralNetTools)
weight1<- sample(1:10,size = length(train_dataset[,1]), replace = T)
weight1<- normalized(weight1)
struct <- c(4, 3, 1)
weight_try <-neuralweights(weight1,struct = struct)
data_try_4 <-data_set[[1]][[2]]
wts_in <- c(13.12, 1.49, 0.16, -0.11, -0.19, -0.16, 0.56, -0.52, 0.81)
struct <- c(2, 2, 1)
rm(try,weight1,weight1_out,a,data,data_w,error,i,j,r_w,result)
rm(try,weight1,weight1_out,a,data,data_w,error,i,j,r_w,result)
rm(try,weight1)
rm(try,weight1,weight1_out,a,data,data_w,error,i,j,r_w,result)
rm(weights)
rm(rw)
rm(struct)
rm(wst_in)
rm(wts_in)
rm(weight_size)
data_try_4 <-data_set[[1]][[2]]
train_dataset <- data_try_4[[1]]
test_dataset <- data_try_4[[2]]
test_date <- data_try_4[[3]]
usd_non_normalize<- data_try_4[[4]]
actual_data<- test_dataset[,5]
predictor_order <- 4
neurons <- 3
train_input <- as.matrix(train_dataset[,1:4])
train_output <- as.matrix(train_dataset[,5])
test_input <- as.matrix(test_dataset[,1:4])
library("RSNNS")
