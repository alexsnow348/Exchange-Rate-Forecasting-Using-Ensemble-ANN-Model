result_usd_PO3 <- list()
for (i in 1:length(neurons)) {
train_dataset_PO3 <- data_set[[1]][[7]][[1]]
test_dataset_PO3 <- data_set[[1]][[7]][[2]]
test_date_PO3 <- data_set[[1]][[7]][[3]]
usd_non_normalize_PO3 <- data_set[[1]][[7]][[4]]
actual_usd_PO3 <- test_dataset[[1]][,4]
result_usd_PO3[[i]] <-  HOMO(train_dataset_PO3,test_dataset_PO3, usd_non_normalize_PO3, neurons = neurons[i], 9, learning_rate)
result_HOMO_usd_PO3 <-rbind(result_HOMO_usd_PO3, c(9,neurons[i], result_usd_PO3[[i]][4],result_usd_PO3[[i]][5],learning_rate))
}
View(result_HOMO_usd)
result_HOMO_usd_PO3 <- data.frame()
usd_non_normalize_PO3 <- data.frame()
test_date_PO3 <- data.frame()
actual_usd_PO3 <- data.frame()
neurons <- seq(3,20,1)
result_usd_PO3 <- list()
source("HOMO.R")
result_HOMO_usd_PO3 <- data.frame()
usd_non_normalize_PO3 <- data.frame()
test_date_PO3 <- data.frame()
actual_usd_PO3 <- data.frame()
neurons <- seq(3,20,1)
result_usd_PO3 <- list()
for (i in 1:length(neurons)) {
train_dataset_PO3 <- data_set[[1]][[7]][[1]]
test_dataset_PO3 <- data_set[[1]][[7]][[2]]
test_date_PO3 <- data_set[[1]][[7]][[3]]
usd_non_normalize_PO3 <- data_set[[1]][[7]][[4]]
actual_usd_PO3 <- test_dataset[[1]][,4]
result_usd_PO3[[i]] <-  HOMO(train_dataset_PO3,test_dataset_PO3, usd_non_normalize_PO3, neurons = neurons[i], 9, learning_rate)
result_HOMO_usd_PO3 <-rbind(result_HOMO_usd_PO3, c(9,neurons[i], result_usd_PO3[[i]][4],result_usd_PO3[[i]][5],learning_rate))
}
source("HOMO.R")
source("HETRO.R")
result_HOMO_usd_PO3 <- data.frame()
usd_non_normalize_PO3 <- data.frame()
test_date_PO3 <- data.frame()
actual_usd_PO3 <- data.frame()
neurons <- seq(3,20,1)
result_usd_PO3 <- list()
for (i in 1:length(neurons)) {
train_dataset_PO3 <- data_set[[1]][[7]][[1]]
test_dataset_PO3 <- data_set[[1]][[7]][[2]]
test_date_PO3 <- data_set[[1]][[7]][[3]]
usd_non_normalize_PO3 <- data_set[[1]][[7]][[4]]
actual_usd_PO3 <- test_dataset[[1]][,4]
result_usd_PO3[[i]] <-  HOMO(train_dataset_PO3,test_dataset_PO3, usd_non_normalize_PO3, neurons = neurons[i], 9, learning_rate)
result_HOMO_usd_PO3 <-rbind(result_HOMO_usd_PO3, c(9,neurons[i], result_usd_PO3[[i]][4],result_usd_PO3[[i]][5],learning_rate))
}
View(result_HOMO_usd_PO3)
for (i in 1:length(predictor_order)) {
result_HOMO_usd_PO3 <- data.frame()
usd_non_normalize_PO3 <- data.frame()
test_date_PO3 <- data.frame()
actual_usd_PO3 <- data.frame()
result_usd_PO3 <- list()
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_usd[[i]] <- test_dataset[[i]][,i+3]
if(predictor_order[i]==3){ neurons<-seq(2,20,1)}
if(predictor_order[i]==4){ neurons<-seq(3,20,1)}
if(predictor_order[i]==5){ neurons<-seq(3,20,1)}
if(predictor_order[i]==6){ neurons<-seq(4,20,1)}
if(predictor_order[i]==7){ neurons<-seq(4,20,1)}
if(predictor_order[i]==8){ neurons<-seq(5,20,1)}
if(predictor_order[i]==9){ neurons<-seq(5,20,1)}
if(predictor_order[i]==10){ neurons<-seq(6,20,1)}
for (j in 1:length(neurons)) {
train_dataset_PO3 <- train_dataset[[i]]
test_dataset_PO3 <- test_dataset[[i]]
test_date_PO3 <- test_date[[i]]
usd_non_normalize_PO3 <-   usd_non_normalize[[i]]
actual_usd_PO3 <-  actual_usd[[i]]
result_usd_PO3[[j]] <-  HOMO(train_dataset_PO3,test_dataset_PO3, usd_non_normalize_PO3, neurons = neurons[j], predictor_order[i], learning_rate)
result_HOMO_usd_PO3 <-rbind(result_HOMO_usd_PO3, c(predictor_order[i],neurons[j], result_usd_PO3[[j]][4],result_usd_PO3[[j]][5],learning_rate))
}
names(result_HOMO_usd_PO3) <- c("Predictor_Order","Neurons","RMSE","MAE","Learning_Rate")
write <- paste0("result_HOMO_usd_PO(",i,").xlsx")
write.xlsx(result_HOMO_usd_PO3, write)
}
View(result_HETRO_usd)
str(trainr)
str(rbf)
str(neuralnet::mlp)
str(neuralnet)
View(test_dataset_PO3)
View(test_dataset_PO3)
View(train_dataset_PO3)
source("MLP.R")
source("MLP.R")
rm(write)
learning_func <- c("logistic","tanh")
learning_rate <- seq(0.1,1,0.1)
learning_rate <- seq(0.1,1,0.1)
try <- MLP(train_dataset_PO3,test_date_PO3,usd_non_normalize_PO3,predictor_order[8],neurons[1],learning_rate[1],learning_func[1])
set.seed(1)
weight_size =length(train_dataset[,1])
weight1 <- sample(1:1000,size = weight_size,replace = F)
weight1 = normalized(weight1)
set.seed(1)
weight_size =length(train_dataset_PO3[,1])
weight1 <- sample(1:1000,size = weight_size,replace = F)
weight1 = normalized(weight1)
try <- MLP(train_dataset_PO3,test_date_PO3,usd_non_normalize_PO3,predictor_order[8],neurons[1],learning_rate[1],learning_func[1],weight1)
try <- MLP(train_dataset_PO3,test_date_PO3,usd_non_normalize_PO3,predictor_order[8],neurons[1],learning_rate[1],learning_func[1],weight1)
try <- MLP(train_dataset_PO3,test_date_PO3,usd_non_normalize_PO3,predictor_order[8],neurons[1],learning_rate[1],learning_func[1],weight1)
source("MLP.R")
try <- MLP(train_dataset_PO3,test_date_PO3,usd_non_normalize_PO3,predictor_order[8],neurons[1],learning_rate[1],learning_func[1],weight1)
source("MLP.R")
try <- MLP(train_dataset_PO3,test_date_PO3,usd_non_normalize_PO3,predictor_order[8],neurons[1],learning_rate[1],learning_func[1],weight1)
head(test_dataset[1:10])
try <- MLP(train_dataset_PO3,test_dataset_PO3,usd_non_normalize_PO3,predictor_order[8],neurons[1],learning_rate[1],learning_func[1],weight1)
source("MLP.R")
try <- MLP(train_dataset_PO3,test_dataset_PO3,usd_non_normalize_PO3,predictor_order[8],neurons[1],learning_rate[1],learning_func[1],weight1)
head(exchange_model$weights)
str(exchange_model$weights)
source("MLP.R")
try <- MLP(train_dataset_PO3,test_dataset_PO3,usd_non_normalize_PO3,predictor_order[8],neurons[1],learning_rate[1],learning_func[1],weight1)
source("MLP.R")
learning_rate <- seq(0.1,1,0.1)
train_dataset <- list()                                 #   4. EURO            #   #  4. PO_6   8. PO_10
test_dataset <- list()
predictor_order <- seq(3,10,1)
test_date <- list()
learning_rate <- seq(0.1,1,0.1)
#************************************************************ HOMOGENEOUS *************************************************************************#
source("HOMO.R")
#USD_ONLY MODEL (HOMO)
result_HOMO_usd <- data.frame()
usd_non_normalize <- list()
result_usd <- list()
actual_usd <- list()
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_usd[[i]] <- test_dataset[[i]][,i+3]
neurons <- ceiling((i+3)/2)
result_usd[[i]] <-  HOMO(train_dataset[[i]],test_dataset[[i]],usd_non_normalize[[i]], neurons = neurons, predictor_order[i],learning_func[2], learning_rate[i])
#result_HOMO_usd <-rbind(result_HOMO_usd, c(i+2,ceiling((predictor_order[i]+1)/2), result_usd[[i]][4],result_usd[[i]][5],learning_rate))
}
result_HOMO_usd <- data.frame()
usd_non_normalize <- list()
result_usd <- list()
actual_usd <- list()
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_usd[[i]] <- test_dataset[[i]][,i+3]
neurons <- ceiling((i+3)/2)
result_usd[[i]] <-  HOMO(train_dataset[[i]],test_dataset[[i]],usd_non_normalize[[i]],
neurons = neurons, predictor_order[i],learning_func[2], learning_rate[i])
result_HOMO_usd <-rbind(result_HOMO_usd, c(i+2,ceiling((predictor_order[i]+1)/2), result_usd[[i]][4],
result_usd[[i]][5],learning_rate[i],learning_func[i]))
}
result_HOMO_usd <- data.frame("Predictor_Order"=numeric(),"Neurons"=numeric(),"RMSE"=numeric(),
"MAE"=numeric(),"Learning_Rate"=numeric(),"Learning_Function"=character(),
stringsAsFactors=F)
usd_non_normalize <- list()
result_usd <- list()
actual_usd <- list()
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_usd[[i]] <- test_dataset[[i]][,i+3]
neurons <- ceiling((i+3)/2)
result_usd[[i]] <-  HOMO(train_dataset[[i]],test_dataset[[i]],usd_non_normalize[[i]],
neurons = neurons, predictor_order[i],learning_func[2], learning_rate[i])
result_HOMO_usd <-rbind(result_HOMO_usd, c(i+2,ceiling((predictor_order[i]+1)/2), result_usd[[i]][4],
result_usd[[i]][5],learning_rate[i],learning_func[i]))
}
View(result_HOMO_usd)
result_HOMO_usd <- data.frame("Predictor_Order"=numeric(),"Neurons"=numeric(),"RMSE"=numeric(),
"MAE"=numeric(),"Learning_Rate"=numeric(),"Learning_Function"=character(),
stringsAsFactors=FALSE)
View(result_HOMO_usd)
usd_non_normalize <- list()
result_usd <- list()
actual_usd <- list()
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_usd[[i]] <- test_dataset[[i]][,i+3]
neurons <- ceiling((i+3)/2)
result_usd[[i]] <-  HOMO(train_dataset[[i]],test_dataset[[i]],usd_non_normalize[[i]],
neurons = neurons, predictor_order[i],learning_func[2], learning_rate[i])
result_HOMO_usd <-rbind(result_HOMO_usd, c(i+2,ceiling((predictor_order[i]+1)/2), result_usd[[i]][4],
result_usd[[i]][5],learning_rate[i],learning_func[i]))
}
learning_func <- as.character(learning_func)
learning_func
learning_func[1]
learning_func[2]
result_HOMO_usd <- data.frame("Predictor_Order"=numeric(),"Neurons"=numeric(),"RMSE"=numeric(),
"MAE"=numeric(),"Learning_Rate"=numeric(),"Learning_Function"=character(),
stringsAsFactors=FALSE)
usd_non_normalize <- list()
result_usd <- list()
actual_usd <- list()
for (i in 1:length(predictor_order)) {
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_usd[[i]] <- test_dataset[[i]][,i+3]
neurons <- ceiling((i+3)/2)
result_usd[[i]] <-  HOMO(train_dataset[[i]],test_dataset[[i]],usd_non_normalize[[i]],
neurons = neurons, predictor_order[i],learning_func[2], learning_rate[i])
result_HOMO_usd <-rbind(result_HOMO_usd, c(i+2,ceiling((predictor_order[i]+1)/2), result_usd[[i]][4],
result_usd[[i]][5],learning_rate[i],learning_func[i]))
}
View(result_HOMO_usd)
str(result_HOMO_usd$X.logistic.)
load("~/Dropbox/FYP/Data/FYP Program/try.RData")
Result_USD_HOMO_LIST <- list()
count <- 1
### Changes in Neurons and Learning Functins and Learning Rate
for (i in 1:length(predictor_order)) {
result_HOMO_usd_PO3 <- data.frame("Predictor_Order"=numeric(),"Neurons"=numeric(),"RMSE"=numeric(),
"MAE"=numeric(),"Learning_Function"=character(),"Learning_Rate"=numeric(),
stringsAsFactors=FALSE)
usd_non_normalize_PO3 <- data.frame()
test_date_PO3 <- data.frame()
actual_usd_PO3 <- data.frame()
result_usd_PO3 <- list()
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_usd[[i]] <- test_dataset[[i]][,i+3]
if(predictor_order[i]==3){ neurons<-seq(2,20,1)}
if(predictor_order[i]==4){ neurons<-seq(3,20,1)}
if(predictor_order[i]==5){ neurons<-seq(3,20,1)}
if(predictor_order[i]==6){ neurons<-seq(4,20,1)}
if(predictor_order[i]==7){ neurons<-seq(4,20,1)}
if(predictor_order[i]==8){ neurons<-seq(5,20,1)}
if(predictor_order[i]==9){ neurons<-seq(5,20,1)}
if(predictor_order[i]==10){ neurons<-seq(6,20,1)}
for (l in 1:length(learning_rate) ){
for (k in 1:length(learning_func)) {
for (j in 1:length(neurons)) {
train_dataset_PO3 <- train_dataset[[i]]
test_dataset_PO3 <- test_dataset[[i]]
test_date_PO3 <- test_date[[i]]
usd_non_normalize_PO3 <-   usd_non_normalize[[i]]
actual_usd_PO3 <-  actual_usd[[i]]
result_usd_PO3[[j]] <-  HOMO(train_dataset_PO3,test_dataset_PO3, usd_non_normalize_PO3,
neurons = neurons[j], predictor_order[i], learning_func[k],learning_rate[l])
result_HOMO_usd_PO3[j,] <-c(predictor_order[i],neurons[j],
result_usd_PO3[[j]][4],result_usd_PO3[[j]][5],
learning_func[k],learning_rate[l])
Result_USD_HOMO_LIST[[count]] <- list(predictor_order[i],neurons[j],learning_rate[l],
learning_func[k], result_usd_PO3[[j]])
count <- count +1
}
# Writing to xlsx file
#write <- paste0("result_HOMO_usd_PO_",i,"_LF_",learning_func[k],"_LR_",learning_rate[l],".xlsx")
#write.xlsx(result_HOMO_usd_PO3, write)
}
}
}
source("Data_Processing_V.R")
source("requried_functions_N_libraries.R")
url <- "/home/wut/Desktop/Link to Data/FYP Program/Raw Data/alldata_Jan_2017.csv"
a <- Data_Processing(url,3,"U.S. Dollar")
a <- Data_Processing_V(url,3,"U.S. Dollar")
length(test_dataset$USD)
length(test_dataset$USD)*0.5
test_data_end <- ceiling(length(test_dataset$USD)*0.5)
test_data_input = test_dataset[1:test_data_end, 1:predictor_order]
test_data_output = test_dataset[1:test_data_end, predictor_order+1]
test_data = test_dataset[1:test_data_end, ]
validate_data = test_dataset[test_data_end+1:length(test_dataset$USD),]
validate_state = test_data_end+1
validate_start = test_data_end+1
validate_data = test_dataset[validate_start:length(test_dataset$USD),]
test_data_end <- ceiling(length(test_dataset$USD)*0.5)
test_date = test_date[1:test_data_end, ]
test_data_end <- ceiling(length(test_dataset$USD)*0.5)
Date = createTimeSlices(usd$Date, predictor_order, 1, fixedWindow = T)
date = testing_data(Date,usd)
test_date = as.data.frame(date[test_end:length(test_data$USD),]$Date)
names(test_date)= "Date"
test_date = test_date[1:test_data_end, ]
validate_start = test_data_end+1
validate_date = test_date[validate_start:length(test_dataset$USD),]
testing_date = as.data.frame(date[test_end:length(test_data$USD),]$Date)
names(test_date)= "Date"
test_data_end <- ceiling(length(test_dataset$USD)*0.5)
test_date = testing_date[1:test_data_end, ]
validate_start = test_data_end+1
validate_date = testing_date[validate_start:length(test_dataset$USD),]
a <- Data_Processing_V(url,3,"U.S. Dollar")
a <- Data_Processing_V(url,3,"U.S. Dollar")
source("Data_Processing_V.R")
a <- Data_Processing_V(url,3,"U.S. Dollar")
source("Data_Processing_V.R")
a <- Data_Processing_V(url,3,"U.S. Dollar")
head(a[[4]])
head(a[[5]])
as.character( head(a[[5]]))
b <- as.character(a[[5]])
b <- as.character(a[5])
as.Date.character(a[[5]])
b <- as.Date(a[[5]])
source("Data_Processing_V.R")
a <- Data_Processing_V(url,3,"U.S. Dollar")
str(test_date)
str(testing_data)
str(testing_date)
str(date)
str(testing_date)
as.vector(testing)
as.vector(testing_date)
date = as.vector(date)
testing_date = as.data.frame(date[test_end:length(test_data$USD),]$Date)
str(testing_date)
date = as.vector(date)
str(date)
date = testing_data(Date,usd)
testing_date = as.data.frame(date[test_end:length(test_data$USD),]$Date)
testing_date <- as.vector(testing_date)
View(testing_date)
str(testing_date)
testing_date_v <- as.vector(testing_date)
str(testing_date_v)
head(as.vector(testing_date))
names(testing_date)= "Date"
head(as.vector(testing_date))
testing_date = date[test_end:length(test_data$USD),]$Date
testing_date_v <- as.vector(testing_date)
testing_date<- as.vector(testing_date)
View(date)
tail(testing_date)
View(date)
length(test_data$USD
)
testing_date = date[test_end:length(testing_data$USD),]$Date
testing_date = date[test_end:length(date$USD),]$Date
View(date)
testing_date = date[test_end:length(date$Value),]$Date
testing_date<- as.vector(testing_date)
names(testing_date)= "Date"
testing_date <- as.data.frame(testing_date)
names(testing_date)= "Date"
View(testing_date)
test_data_end <- ceiling(length(test_dataset$USD)*0.5)
test_date = testing_date[1:test_data_end, ]
validate_start = test_data_end+1
validate_date = testing_date[validate_start:length(test_dataset$USD),]
date = testing_data(Date,usd)
testing_date = date[test_end:length(date$Value),]$Date
testing_date<- as.vector(testing_date)
es(testing_date)= "Date"
names(testing_date)= "Date"
test_data_end <- ceiling(length(test_dataset$USD)*0.5)
test_date = testing_date[1:test_data_end]
testing_date<- as.vector(testing_date)
test_date = testing_date[1:test_data_end]
testing_date<- as.vector(testing_date)
str(testing_date)
testing_date <- as.data.frame(testing_date)
str(testing_date)
testing_date<- as.vector(testing_date)
testing_date[1]
testing_date[1][1]
testing_date <- as.Date(testing_date)
testing_date <- as.Date.character(testing_date)
testing_date <- as.data.frame(testing_date)
names(testing_date)= "Date"
test_data_end <- ceiling(length(test_dataset$USD)*0.5)
test_date = testing_date[1:test_data_end]
test_data_end <- ceiling(length(test_dataset$USD)*0.5)
length(test_dataset$USD)
View(test_dataset)
test_data_end <- ceiling(length(test_dataset$firstDay)*0.5)
test_date = testing_date[1:test_data_end,]
validate_start = test_data_end+1
validate_date = testing_date[validate_start:length(test_dataset$USD),]
testing_date = date[test_end:length(date$Value),]$Date
testing_date <- as.data.frame(testing_date,stringsAsFactors=FALSE )
str(testing_date)
testing_date = date[test_end:length(date$Value),]$Date
testing_date <- as.data.frame(lapply(testing_date, as.character), stringsAsFactors=FALSE )
str(testing_date)
head(testing_date)
head(testing_date$X.02.13.2009.)
testing_date[] <-    lapply(testing_date, as.character)
testing_date_list <- list(lapply(testing_date, as.character))
testing_date_list <- list(lapply(testing_date))
testing_date_list <- list(lapply(testing_date, as.character))
lesting_date_list[[1]]
testing_date_list[[1]]
testing_date_list[[1]][[1]]
testing_date_list[[1]][[508]]
testing_date_list[[2][[508]]
testing_date_list[[2]][[508]]
testing_date_list[[1]][[508]]
length(testing_date_list)
length(testing_date_list[[1]])
i <- 1
testing_data <- data_frame("Date"= character())
i <- 1
testing_data <- data_frame("Date"= character())
while (i != length(testing_date_list[[1]]) ){
testing_data[i,] <- c(testing_date_list[[1]][[i]])
i <- i +1
}
while (i != length(testing_date_list[[1]]) ){
testing_data[i,] <- c(testing_date_list[[1]][[i]])
i <- i +1
}
length(testing_date_list[[1]])
length(testing_date_list[[1]])
i <- 1
testing_data <- data_frame("Date"= character())
for (i in 1:length(testing_date_list[[1]])) {
testing_data[i,] <- c(testing_date_list[[1]][[i]])
}
for (i in 1:length(testing_date_list[[1]])) {
testing_data[i,] <- c(testing_date_list[[1]][[i]])
}
source("Data_Processing_V.R")
a <- Data_Processing_V(url,3,"U.S. Dollar")
q
source("Data_Processing_V.R")
test_data_end <- ceiling(length(test_dataset$firstDay)*0.5)
source("Data_Processing_V.R")
a <- Data_Processing_V(url,3,"U.S. Dollar")
str(testing_date)
test_data_end <- ceiling(length(test_dataset$firstDay)*0.5)
test_date = testing_date[1:test_data_end,]
validate_start = test_data_end+1
validate_date = testing_date[validate_start:length(test_dataset$USD),]
View(validate_date)
View(test_date)
View(validate_date)
View(testing_date)
View(date)
View(train_dataset)
test_end
length((date$Value))
1271-764
testing_date_list <- list(lapply(testing_date, as.character))
testing_date <- as.data.frame(testing_date_list)
str(testing_data)
str(testing_date)
i <- 1
testing_date <- data_frame("Date"= character())
for (i in 1:length(testing_date_list[[1]])) {
testing_date[i,] <- c(testing_date_list[[1]][[i]])
}
testing_date_list <- list(lapply(testing_date, as.character))
date = testing_data(Date,usd)
testing_date = date[test_end:length(date$Value),]$Date
testing_date_list <- list(lapply(testing_date, as.character))
View(validate_date)
source("Data_Processing_V.R")
a <- Data_Processing_V(url,3,"U.S. Dollar")
str(testing_date)
tail(testing_date)
test_data_end <- ceiling(length(test_dataset$firstDay)*0.5)
View(testing_date)
test_date = testing_date[1:test_data_end,]
validate_start = test_data_end+1
validate_date = testing_date[validate_start:length(test_dataset$USD),]
validate_start = test_data_end+1
validate_date = testing_date[validate_start:length(testing_date$Date),]
View(validate_date)
View(test_date)
View(date)
source("Data_Processing_V.R")
rm(a)
rm(actual_usd,actual_usd_PO3,b)
rm(count)
rm(i,j,k,l)
rm(result_usd)
rm(result_usd_PO3)
rm(test_data_end)
rm(test_dataset)
rm(test_date)
rm(train_dataset)
rm(try)
rm(usd_non_normalize_PO3)
rm(usd_non_normalize)
rm(weight1)
rm(weight_size)
source("Data_Processing.R")
rm(result_HETRO_usd,result_HETRO_usd)
rm(result_HOMO_usd)
rm(result_HOMO_usd_PO3)
rm(test_dataset_PO3)
rm(test_date_PO3)
rm(train_dataset_PO3)
rm(Data_Processing_V())
View(Data_Processing_V)
rm(data_set)
source("data_spliting.R")
source("data_spliting_V.R")
data_set <- data_spliting()                             # Usage of Data_set
source("data_spliting_V.R")
data_set <- data_spliting()                             # Usage of Data_set
